@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IAuthStateService AuthState
@inject NavigationManager NavManager
@inject ICustomAuthenticationStateProvider AuthStateProvider

<div style=" background: linear-gradient(#404040,
                                         #323232,
                                         #292929,
                                         #252525,
                                         #1b1b1b,
                                         #1b1b1b,
                                         #1b1b1b,
                                         #1b1b1b,
                                         #252525)">
    <div style="display: flex;
                flex-direction: row;
                justify-content: center;
                gap: 235px;"
         data-aos="fade"
         data-aos-delay="400">
        <div style="text-align: left;
                padding-top: 10px;
                padding-bottom: 10px">
            <NavLink href="">
                <img style="width: 120px"
                     alt=""
                     src="@_icon"
                     @onmouseover="MouseOn"
                     @onmouseout="MouseOff"/>
            </NavLink>
        </div>
        <div style="color: white;
                text-align: center;
                font-style: oblique;
                padding-top: 13px">
            Published by Nubisoftâ„¢
        </div>

        @if (AuthState.UserName.IsNullOrEmpty())
        {
            <div style="color: white;
                        text-align: right;
                        padding-top: 12px">
                <NavLink href="/Login"
                         class="user-links">
                    Login
                </NavLink> /
                <NavLink href="/Register"
                         class="user-links">
                    Register
                </NavLink>
            </div>
        }
        else
        {
            <div style="color: white;
                            text-align: right;
                            padding-top: 12px">
                Welcome <NavLink href="/User"
                                 class="user-links">
                    @AuthState.UserName
                </NavLink>
            </div>
        }
    </div>
</div>

<div style="display: flex;
            justify-content: center;
            padding-top: 10px;
            padding-bottom: 10px;
            background: #000000">
    <div>
        <NavLink href="Games"
                 class="page-links">
            All Games
        </NavLink>
    </div>
    <div style="border-left: 1px solid white;
                        height: auto"></div>
    <div>
        <NavLink href="Leaderboards"
                 class="page-links">
            Leaderboards
        </NavLink>
    </div>
    <div style="border-left: 1px solid white;
                        height: auto"></div>
    <div>
        <NavLink href="Chat"
                 class="page-links">
            Big Chat
        </NavLink>
    </div>
    <div style="border-left: 1px solid white;
                        height: auto"></div>
    <div>
        <NavLink href="MessageBoard"
                 class="page-links">
            Message Board
        </NavLink>
    </div>
    <div style="border-left: 1px solid white;
                        height: auto"></div>
    <div>
        <NavLink href="Tests"
                 class="page-links">
             Prototypes
        </NavLink>
    </div>
</div>

<style>
    .user-links {
        color: white;
        text-decoration: none;
    }
    .user-links:hover {
        color: white;
        text-shadow: 0 0 10px white;
    }
    .page-links {
        color: white;
        text-decoration: none;
        padding-right: 50px;
        padding-left: 50px;
    }
    .page-links:hover {
        color: white;
    }
</style>

@code
{
    private string _icon = "/Assets/logo/BWLogo.png";
    private string _userName;
    private string _loggedOut;

    private bool _isClientSide;
    
    protected override void OnInitialized()
    {
        AuthState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateHasChanged;
    }

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                StateHasChanged();
            }
        }
    }

    private async Task Logout()
    {
        var refreshToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "RefreshToken");
        var memberRefreshToken = new MemberTokenRequest() { RefreshToken = refreshToken };
        var response = await Http.PostAsJsonAsync("http://localhost:80/api/members/Logout", memberRefreshToken);
        if (response.IsSuccessStatusCode)
        {
            AuthStateProvider.MarkUserAsLoggedOut();
            
            Task.Delay(500);
            StateHasChanged();
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Logout failed");
        }
    }
    
    private void MouseOn()
    {
        _icon = "/Assets/logo/ColorLogo.png";
    }

    private void MouseOff()
    {
        _icon = "/Assets/logo/BWLogo.png";
    }
}
