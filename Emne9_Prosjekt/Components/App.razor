<!DOCTYPE html>
<html lang="en">

<head>
    <title>BLJ Games</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css"/>
    <link rel="stylesheet" href="app.css"/>
    <link rel="stylesheet" href="Emne9_Prosjekt.styles.css"/>
    <link rel="icon" type="image/png" href="/Assets/logo/icon.png"/>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <HeadOutlet @rendermode="@InteractiveServer"/>
    <style>
        body {
            user-select: none;
        }
        img {
            user-select: none;
        }
    </style>
</head>

<body>
<Routes @rendermode="@InteractiveServer"/>
<script src="_framework/blazor.web.js"></script>
<script src="Audio.js"></script>
<script src="Video.js"></script>
<script src="https://accounts.google.com/gsi/client"></script>
<script>
    function initGoogleSignIn(clientId, dotNetHelper) {
        google.accounts.id.initialize({
            client_id: clientId,
            callback: (response) => {
                dotNetHelper.invokeMethodAsync('HandleGoogleSignIn', response.credential);
            },
            redirect_uri: window.location.origin + '/login'
        });
        google.accounts.id.renderButton(
            document.getElementById("buttonDiv"),
            { theme: "outline", size: "large" }  // customization attributes
        );
        google.accounts.id.prompt(); // also display the One Tap sign-in prompt
    }
</script>
<script>
    window.setCookie = (name, value, hours) => {
        let expires = "";
        if (hours) {
            const date = new Date();
            date.setTime(date.getTime() + (hours * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/; Secure; SameSite=Lax; HttpOnly;";
    };

    window.getCookie = (name) => {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
        return null;
    };

    window.deleteCookie = (name) => {
        // Set the expiration date to a past value to remove the cookie
        document.cookie = name + "=; Max-Age=0; path=/; Secure; SameSite=Lax";
    };

</script>

<script>
       async function getClientIpAddress(dotNetHelper) {
           try {
               // Use a service like ipify to get the client's public IP
               const response = await fetch("https://api64.ipify.org?format=json");
               if (response.ok) {
                   const data = await response.json();
                   const clientIp = data.ip; // Extract the IP address
                   if (dotNetHelper) {
                       // Call the .NET method to set the IP
                       dotNetHelper.invokeMethodAsync("SetClientIp", clientIp);
                   }
               } else {
                   console.error("Unable to fetch IP: ", response.status);
               }
           } catch (error) {
               console.error("Error fetching IP: ", error);
           }
       }
   </script>


<script type="module" src="https://unpkg.com/&#64;google/model-viewer/dist/model-viewer.min.js"></script>
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
<script>
    AOS.init();
</script>
</body>

</html>