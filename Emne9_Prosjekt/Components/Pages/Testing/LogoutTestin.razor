@page "/LogoutTestin"
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject IAuthStateService AuthState


<h3 style="padding-top: 125px">LogoutTestin</h3>


@if (!userName.IsNullOrEmpty())
{
    <button @onclick="Logout" class="btn btn-primary">Logout</button>
}
else
{
    // redirect or something??? DUNO
    <p>You are not logged in</p>
}


@code {
    private string logedout;
    private string userName;
    private bool loggedIn;
    private bool _isClientSide;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            Console.WriteLine($"Username from LogoutTestin: {userName}");
            loggedIn = !string.IsNullOrWhiteSpace(userName);

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loggedIn == false)
            {
                // Perform JavaScript interop only after prerendering
                _isClientSide = true;

                try
                {
                    // Retrieve the token from cookies using JSInterop
                    var token = await JSRuntime.InvokeAsync<string>("getCookie", "AuthTokenCOMON");

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Add the JWT token to the Authorization header of HttpClient
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    }

                    // Fetch the username from the API
                    userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
                    loggedIn = !string.IsNullOrEmpty(userName);

                    // Trigger a re-render now that client-side data is available
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during initialization: {ex.Message}");
                }
            }
            
        }
    }
    
    private async Task Logout()
    {
        var response = await Http.GetAsync("http://localhost:80/api/members/Logout");
        if (response.IsSuccessStatusCode)
        {
            // Remove cookie
            await JSRuntime.InvokeVoidAsync("deleteCookie", "AuthTokenCOMON");

            // Remove the JWT from the Authorization header
            Http.DefaultRequestHeaders.Authorization = null;
            AuthState.ClearUserName();
            
            logedout = "Logout successful";
            Task.Delay(500);
            StateHasChanged();
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            logedout = "Logout failed";
        }
        Console.WriteLine(logedout);
    }
}