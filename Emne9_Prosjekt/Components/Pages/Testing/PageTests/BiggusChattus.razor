@page "/BigChat"
@inject IBigChatHubConnection BigChatHubConnection
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject HttpClient Http


<h3 style="padding-top: 125px">Live Chat</h3>

<p><strong>Tilkoblet!</strong></p>
<div>
    <input @bind="_message" @bind:event="oninput" placeholder="Skriv en melding..." />
    <button @onclick="SendMessage">Send</button>
</div>
<div id="chat-box">
    @foreach (var msg in _messages)
    {
        <div class="message @(msg.Item1 == _userName ? "self" : "user")">
            <strong>@msg.Item1</strong>: @msg.Item2
        </div>
    }
</div>

@code {
    private  string _userName;
    private string _message = "";
    private bool _isConnected;
    private List<(string, string)> _messages = new();
    
    //Ser du det n√• da Brian?
    
    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            _userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            if (_userName is null)
            {
                _userName = "guest";
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("---Establishing connection...");

            BigChatHubConnection.Connection.On<string, string>("ReceiveMessage", (_, message) =>
            {
                _messages.Add((_userName, message));
                InvokeAsync(StateHasChanged);
            });

            BigChatHubConnection.Connection.On<string>("UserConnected", (_) =>
            {
                _messages.Add(("System", $"{_userName} har koblet til."));
                InvokeAsync(StateHasChanged);
            });

            BigChatHubConnection.Connection.On<string>("UserDisconnected", (_) =>
            {
                _messages.Add(("System", $"{_userName} har forlatt chatten."));
                InvokeAsync(StateHasChanged);
            });

            try
            {
                await BigChatHubConnection.Connection.StartAsync();
                Console.WriteLine("--Connection established!");
                _isConnected = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"--Feil ved tilkobling: {ex.Message}");
            }
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            await BigChatHubConnection.Connection.SendAsync("SendMessage", _message);
            _message = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_isConnected)
        {
            await BigChatHubConnection.DisposeAsync();
            Console.WriteLine("--Connection closed.");
        }
    }
}