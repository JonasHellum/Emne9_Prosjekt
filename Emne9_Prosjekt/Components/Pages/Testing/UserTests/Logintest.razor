@page "/logintest"
@using System.Text.Json
@using BitzArt.Blazor.Cookies
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Emne9_Prosjekt.Components.Pages.Services
@using Emne9_Prosjekt.Components.Pages.UserContent
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.IdentityModel.Tokens
@using SameSiteMode = Microsoft.AspNetCore.Http.SameSiteMode
@inject HttpClient Http
@inject IHttpContextAccessor context
@inject IJSRuntime JSRuntime
@* @inject ICookieSettingService CookieService *@
@inject IHttpContextAccessor _httpContextAccessor
@inject ICookieService CookieService
@inject ICustomAuthenticationStateProvider AuthStateProvider




<h3 style="padding-top: 125px">Logintest</h3>


@if (memberDto != null && userName.IsNullOrEmpty())
{
    @* <Login /> *@
    
    <EditForm Model="@memberDto" OnValidSubmit="LoginAsync" FormName="LoginForm">

        <div>
            <label>Username:</label>
            <InputText @bind-Value="memberDto.UserName" class="form-control" name="Username"/>
        </div>

        <div>
            <label>Password:</label>
            <InputText @bind-Value="memberDto.Password" type="password" class="form-control" name="Password"/>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            test??? @errorMessage
        </div>
    }

    @if (loginSuccess)
    {
        <div class="alert alert-success">
            Login success! Username: @memberDto.UserName
        </div>
    }
    @if (loginFailed)
    {
        <div class="alert alert-danger">
            Login failed.
        </div>
    }
}
else if (memberDto == null)
{
    <p>loading...??</p>
}
@if (loggedIn)
{
    
    <div class="alert alert-success" href="Home.razor">
        Already logged in as: @userName
    </div>
}

@code {
    private MemberDTO memberDto { get; set; }
    private bool loginSuccess;
    private bool loginFailed;
    private string errorMessage;
    private string userName;
    private bool loggedIn;
    private bool _isClientSide;
    
    
    protected override async Task OnInitializedAsync()
    {
        memberDto = new MemberDTO();
        
        
        var user = await AuthStateProvider.GetLoggedInUserAsync();
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity?.Name;
            loggedIn = true;
            Console.WriteLine("Set the username from: OnInitializedAsync");
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loggedIn == false)
            {

                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity.IsAuthenticated)
                {
                    var user = authState.User;
                    userName = user.Identity.Name ?? null;
                    loggedIn = !string.IsNullOrEmpty(userName);
                
                    Console.WriteLine("Set the username from OnAfterRenderAsync");
                    StateHasChanged();
                }
            }
        }
    }

    protected async Task LoginAsync()
    {
        if (string.IsNullOrEmpty(memberDto.UserName) || string.IsNullOrEmpty(memberDto.Password))
        {
            errorMessage = "Username and Password are required.";
            return;
        }

        try
        {
            
            var response = await Http.PostAsJsonAsync("http://localhost:80/api/members/login", memberDto);
            Console.WriteLine($"Logging in with {memberDto.UserName} and {memberDto.Password}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Login successful!");
                var tokens = await response.Content.ReadFromJsonAsync<MemberTokenResponse>();
                
                if (tokens != null)
                {

                    await AuthStateProvider.MarkUserAsAuthenticated(tokens.AccessToken, tokens.RefreshToken);
                    
                    loginSuccess = true;
                    StateHasChanged();

                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
                Console.WriteLine($"Login failed with status: {response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            Console.WriteLine($"Exception during login: {e.Message}");
        }
    }
}