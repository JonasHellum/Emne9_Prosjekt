@page "/forum"
@using Emne9_Prosjekt.Hubs.HubModels
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject IForumConnection ForumConnection
@implements IAsyncDisposable

<h2 class="text-xl font-semibold mb-4">ðŸ“‹ Meldinger</h2>

<!-- Ny melding input -->
<div class="mb-4 flex gap-2">
    <input @bind="_newMessage.Title" placeholder="Tittel" class="p-2 border rounded w-1/4" />
    <input @bind="_newMessage.Content" placeholder="Innhold" class="p-2 border rounded w-1/2" />
    <button class="p-2 bg-blue-600 text-white rounded" @onclick="SendMessage">Legg til</button>
</div>

<!-- Meldingsliste -->
@foreach (var message in _messages)
{
    <div class="border rounded p-4 mb-4">
        <h3 class="text-lg font-bold">@message.Title</h3>
        <p>@message.Content</p>

        <h4 class="mt-2 font-medium text-sm text-gray-700">ðŸ’¬ Kommentarer</h4>
        @if (message.Comments.Any())
        {
            @foreach (var comment in message.Comments)
            {
                <p class="ml-4 text-sm text-gray-800">- @comment.Text</p>
            }
        }
        else
        {
            <p class="ml-4 text-sm text-gray-500 italic">Ingen kommentarer ennÃ¥</p>
        }

        <!-- Kommentar input -->
        <div class="mt-2 flex gap-2">
            <input 
                @bind="_commentTexts[message.Id]" 
                placeholder="Ny kommentar..." 
                class="p-1 border rounded w-2/3" />
            <button class="p-1 px-3 bg-green-600 text-white rounded" @onclick="() => SendComment(message.Id)">Kommenter</button>
        </div>
    </div>
}
@code {
    private List<Message> _messages = new();
    private Message _newMessage = new();
    private Dictionary<Guid, string> _commentTexts = new();
    
    protected override async Task OnInitializedAsync()
    {
        ForumConnection.Connection.On<List<Message>>("MessagesUpdated", (updatedMessages) =>
        {
            _messages = updatedMessages;

            foreach (var message in _messages)
            {
                if (!_commentTexts.ContainsKey(message.Id))
                {
                    _commentTexts[message.Id] = string.Empty;
                }
            }

            InvokeAsync(StateHasChanged);
        });
        await ForumConnection.Connection.StartAsync();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(_newMessage.Title) && !string.IsNullOrEmpty(_newMessage.Content))
        {
            await ForumConnection.Connection.SendAsync("SendMessage", _newMessage);
            _newMessage = new();
        }
    }

    private async Task SendComment(Guid messageId)
    {
        if (_commentTexts.TryGetValue(messageId, out var commentText) && !string.IsNullOrWhiteSpace(commentText))
        {
            var comment = new Comment
            {
                MessageId = messageId,
                Text = commentText
            };

            await ForumConnection.Connection.SendAsync("SendComment", comment);
            _commentTexts[messageId] = string.Empty; // TÃ¸m inputfeltet
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (ForumConnection is not null)
        {
            await ForumConnection.DisposeAsync();
        }
    }
}
        