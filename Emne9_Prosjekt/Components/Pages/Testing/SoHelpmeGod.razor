@page "/Cry"
@using Emne9_Prosjekt.GameComponents
@inject HubConnection _hubConnection
@inject BattleShipComponents GameComponents
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h3 style="padding-top: 125px">SoHelpMeGod</h3>

@if (!_isConnected)
{
    <p>Kobler til spillet...</p>
}
else if (_gameState == GameState.Setup)
{
    <div style="text-align: center">
        <h3>Battleships setup</h3>
        <p>@(_opponentSetupComplete ? "Venter på at motstanderen skal sette opp sitt brett..." : "Plasser skipene dine")</p>

        <table style="margin: auto">
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(GameComponents.GetBoard()[pos] == 1 ? "lightgreen" : "lightblue");"
                            @onclick="() => PlaceShip(pos)">
                            @GameComponents.GetBoard()[pos]
                        </td>
                    }
                </tr>
            }
        </table>

        @if (!_isSetupComplete)
        {
            <div>
                @foreach (var ship in GameComponents.GetShips())
                {
                    <button @onclick='() => SelectShip(ship.Key)'>@ship.Key</button>
                }
            </div>

            <h4>Valgt skip: @_selectedShip</h4>
            @if (@GameComponents.GetOrientation())
            {
                <h4>Skipets retning: <button @onclick="OrientShip">Horisontal</button></h4>
            }
            else
            {
                <h4>Skipets retning: <button @onclick="OrientShip">Vertikal</button></h4>
            }

            <div>
                Alle skip: @_allShips - Nåværende skip: @BoardValues()
                @if (BoardValues() == _allShips)
                {
                    <button @onclick="CompleteSetup">Fullfør setup</button>
                }
            </div>
            <button @onclick="Reset">Nullstill brett</button>
        }
    </div>
}
else
{
    <div>
        <h5>Ditt Brett</h5>
        <table>
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(BoardStatus(_playerBoard, pos));">
                        </td>
                    }
                </tr>
            }
        </table>
    </div>

    <div>
        <h5>Motstanderens Brett</h5>
        <table>
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(BoardStatus(_opponentBoard, pos));"
                            @onclick="() => ShootAtTarget(pos)">
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
}

@code {
    private enum GameState
    {
        Setup,
        Playing
    }

    private GameState _gameState = GameState.Setup;
    private Dictionary<string, int> _playerBoard = new();
    private Dictionary<string, int> _opponentBoard = new();
    private bool _isConnected;
    private int _playerNumber;
    private string _selectedShip = "";
    private int _allShips;
    private bool _isSetupComplete;
    private bool _opponentSetupComplete;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection.On<int, Dictionary<string, int>>("GameStarted", (playerNumber, board) =>
        {
            _playerNumber = playerNumber;
            _playerBoard = board;
            _gameState = GameState.Playing;
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Dictionary<string, int>>("UpdateBoard", (board) =>
        {
            _playerBoard = board;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<Dictionary<string, int>>("UpdateOpponentBoard", (board) =>
        {
            _opponentBoard = board;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("OpponentDisconnected", () =>
        {
            _isConnected = false;
            _isSetupComplete = false;
            _opponentSetupComplete = false;
            _gameState = GameState.Setup;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("OpponentConnected", () =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("WaitingForOpponent", (message) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("OpponentSetupComplete", () =>
        {
            _opponentSetupComplete = true;
            _gameState = GameState.Setup;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        GameComponents.CreateBoard();

        foreach (var ship in GameComponents.GetShips())
        {
            _allShips += ship.Value;
        }

        await base.OnInitializedAsync();
    }

    private void SelectShip(string ship)
    {
        _selectedShip = ship;
        GameComponents.SelectShip(ship);
        StateHasChanged();
    }

    private void PlaceShip(string position)
    {
        if (!_isSetupComplete)
        {
            _selectedShip = "";
            GameComponents.PlaceShip(position);
            StateHasChanged();
        }
    }

    private void OrientShip()
    {
        GameComponents.ToggleOrientation();
    }

    private int BoardValues()
    {
        int boardValue = 0;
        foreach (var square in GameComponents.GetBoard())
        {
            boardValue += square.Value;
        }
        return boardValue;
    }

    private void Reset()
    {
        GameComponents.CreateBoard();
    }

    private async Task CompleteSetup()
    {
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            var board = GameComponents.GetBoard();
            await _hubConnection.SendAsync("SetupComplete", board);
            _isSetupComplete = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShootAtTarget(string position)
    {
        if (_isConnected && _gameState == GameState.Playing)
        {
            await _hubConnection.SendAsync("ShootAtOpponent", position);
        }
    }

    private string BoardStatus(Dictionary<string, int> board, string pos) => board.ContainsKey(pos) switch
    {
        false => "gray",
        true when board[pos] == 1 => "lightgreen",
        true when board[pos] == -1 => "darkred",
        true when board[pos] == -2 => "blue",
        _ => "lightblue"
    };

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}


