@page "/logintest"
@using System.IdentityModel.Tokens.Jwt
@using System.Runtime.InteropServices.JavaScript
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.AspNetCore.Mvc
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject IHttpContextAccessor context



<h3>Logintest</h3>

@* @if (!userName.IsNullOrEmpty()) *@
@* { *@
@*     <div class="alert alert-success"> *@
@*         Already logged in as: ! Username: @memberDto.UserName *@
@*         Already logged in as: @userName *@
@*     </div> *@
@* } *@
@if (memberDto != null && userName.IsNullOrEmpty())
{
    <div class="alert alert-success">
        Username: @userName
    </div>
    <EditForm Model="@memberDto" OnValidSubmit="LoginAsync" FormName="LoginForm">

        <div>
            <label>Username:</label>
            <InputText @bind-Value="memberDto.UserName" class="form-control" name="Username"/>
        </div>

        <div>
            <label>Password:</label>
            <InputText @bind-Value="memberDto.Password" type="password" class="form-control" name="Password"/>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    @if (loginSuccess)
    {
        <div class="alert alert-success">
            Login success! Username: @memberDto.UserName
        </div>
    }
    @if (loginFailed)
    {
        <div class="alert alert-danger">
            Login failed.
        </div>
    }
}
else if (memberDto == null)
{
    <p>loading...??</p>
}
@if (!userName.IsNullOrEmpty())
{
    
    <div class="alert alert-success" href="Home.razor">
        Already logged in as: @userName.........
    </div>
}

@code {
    private MemberDTO memberDto { get; set; }
    private bool loginSuccess;
    private bool loginFailed;
    private string errorMessage;
    private static string? authHeader;
    private static string userName;
    private static bool loggedIn;
    
    protected override void OnInitialized()
    {
        memberDto = new MemberDTO();
        Console.WriteLine($"Username from Logintest.razor: {userName}");

        if (userName is not null)
        {
            loggedIn = true;
        }
        else
        {
            loggedIn = false;
        }
    }

    protected async Task LoginAsync()
    {
        if (string.IsNullOrEmpty(memberDto.UserName) || string.IsNullOrEmpty(memberDto.Password))
        {
            errorMessage = "Username and Password are required.";
            return;
        }
        
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:80/api/members/login", memberDto);
            Console.WriteLine($"Logging in with {memberDto.UserName} and {memberDto.Password}");

            if (response.IsSuccessStatusCode)
            {
                loginSuccess = true;

                // Extract the Authorization header
                if (response.Headers.TryGetValues("Authorization", out var authHeaders))
                {
                    authHeader = authHeaders.FirstOrDefault();
                    Console.WriteLine($"Authorization header: {authHeader}");
                    var token = authHeaders.FirstOrDefault()?.Split(" ").Last();
                        

                    // Set the token in the default request headers for future requests
                    if (!string.IsNullOrEmpty(authHeader))
                    {
                        loggedIn = true;
                        userName = DecodeJwt(token);
                        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authHeader);
                        
                    }
                }
            }
            else
            {
                // Handle unsuccessful login attempt
                loginFailed = true;

                errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Login failed: {errorMessage}");
            }
        }
        catch (Exception e)
        {
            loginFailed = true;

            errorMessage = "Something went wrong. Please try again.";
            Console.WriteLine($"Exception: {e}");
        }
        
    }
    private string? DecodeJwt(string jwtToken)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(jwtToken);
            return jwt.Claims.FirstOrDefault(claim => claim.Type == "unique_name")?.Value; 
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error decoding JWT: {e.Message}");
            return null;
        }
    }

}