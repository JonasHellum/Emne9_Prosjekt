@page "/UpdatingOrAddingTest"
@using System.Net
@using System.Text
@using System.Text.Json
@using Emne9_Prosjekt.Features.Leaderboards.Models
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject IConfiguration _config



<h3  style="padding-top: 125px">UpdatingOrAddingTest</h3>


@if (leaderboardDto != null && !username.IsNullOrEmpty())
{
    <p>User:</p>
    <p>Username: @username</p>
    
    <button @onclick="ShowEditForm" class="btn btn-primary">Edit</button>
    @if (showEditForm)
    {
        <EditForm Model="leaderboardAddOrUpdateDto" OnValidSubmit="UpdateOrCreateLeaderboard" FormName="editForm">
            <div class="form-group">
                <label for="Name">GameType:</label>
                <InputText @bind-Value="leaderboardAddOrUpdateDto.GameType" class="form-control" name="GameType"/>
            </div>

            <div class="form-group">
                <label for="Name">Wins:</label>
                <InputNumber @bind-Value="leaderboardAddOrUpdateDto.Wins" class="form-control" name="Wins"/>
            </div>

            <div class="form-group">
                <label for="Name">Losses:</label>
                <InputNumber @bind-Value="leaderboardAddOrUpdateDto.Losses" class="form-control" name="Losses"/>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
        
        @if (editSuccess)
        {
            <div class="alert alert-success">
                Edit successfull.
            </div>
        }
        else if (editFailed)
        {
            <div class="alert alert-danger">
                Edit failed.
                <p>@errorMessage</p>
            </div>
        }
    }
}

@code {
    
    private LeaderboardDTO leaderboardDto { get; set; }
    private LeaderboardAddOrUpdateDTO leaderboardAddOrUpdateDto { get; set; } = new LeaderboardAddOrUpdateDTO();
    private string username;
    private bool loggedIn;
    private bool showEditForm;
    private bool editSuccess;
    private bool editFailed;
    private string errorMessage;
    
    
    protected override async Task OnInitializedAsync()
    {
        leaderboardDto = new LeaderboardDTO();
        
        try
        {
            username = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            Console.WriteLine($"memberId from User: {username}");
            loggedIn = !string.IsNullOrEmpty(username);
        
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loggedIn == false)
            {
                
                try
                {
                    // Retrieve the token from cookies using JSInterop
                    var token = await JSRuntime.InvokeAsync<string>("getCookie", "AuthTokenCOMON");

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Add the JWT token to the Authorization header of HttpClient
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    }
                
                    username = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
                    if (!username.IsNullOrEmpty())
                    {
                        StateHasChanged();
                    }
                    else
                    {
                        NavManager.NavigateTo("/login");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during initialization: {ex.Message}");
                }    
            }
        }
    }
    
    private async Task UpdateOrCreateLeaderboard()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:80/api/leaderboards/updateOrCreate")
        {
            Content = new StringContent(JsonSerializer.Serialize(leaderboardAddOrUpdateDto), Encoding.UTF8, "application/json")
        };

        // Add the custom header
        request.Headers.Add("X-Blazor-Secret", _config["AppSettings:BlazorSecret"]);

        // Send the request using the injected HttpClient
        var response = await Http.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            editSuccess = true;
        }
        else
        {
            // Extract validation errors from the response... Might not need if the validating is in blazor page?
            var responseContent = await response.Content.ReadAsStringAsync();
            try
            {
                // Try to parse error messages from response body
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (errorResponse?.Errors != null)
                {
                    errorMessage = string.Join(", ", errorResponse.Errors);
                }
                else
                {
                    errorMessage = "An unknown error occurred.";
                }
            }
            catch
            {
                errorMessage = "Failed: " + responseContent;
            }

            editFailed = true;
        }
    }

    private class ErrorResponse
    {
        public List<string> Errors { get; set; }
    }
    
    private void ShowEditForm()
    {
        leaderboardAddOrUpdateDto.GameType = "Testing";
        leaderboardAddOrUpdateDto.Wins = 1;
        leaderboardAddOrUpdateDto.Losses = 0;
        
        showEditForm = true;
    }

    // private void OnStart()
    // {
    //     leaderboardAddOrUpdateDto.GameType = "Battleships";
    //     leaderboardAddOrUpdateDto.Wins = 0;
    //     leaderboardAddOrUpdateDto.Losses = 1;
    // }
    //
    // private void OnPlayer1Win()
    // {
    //     player1LeaderboardDto.GameType = "Battleships";
    //     player1LeaderboardDto.Wins = 1;
    //     player1LeaderboardDto.Losses = -1;
    //
    //     player2LeaderboardDto.GameType = "Battleships";
    //     player2LeaderboardDto.Wins = 0;
    //     player2LeaderboardDto.Losses = 0;
    // }
}