@page "/InGameBattleships"
@using Emne9_Prosjekt.Game_components
@inject BattleShipComponents GameComponents

<h4>Your board</h4>
<table>
    @foreach (var row in "ABCDEFGHIJ")
    {
        <tr>
            @for (int col = 1; col <= 10; col++)
            {
                var pos = $"{row}{col}";
                <td style="width: 30px; height: 30px; text-align: center; border: 1px solid black;
                    background: @(GameComponents.GetBoard()[pos] == 1 ? "lightgreen" : "lightblue");">
                    @GameComponents.GetBoard()[pos]
                </td>
            }
        </tr>
    }
</table>
<div>
    @if (_allShips == @GameComponents.HitCount)
    {
        <h3>Win-condition met!</h3>
    }
</div>

<h4>Opponents board</h4>
@if (!GameComponents.GetBoard().Any())
{
    <p><em>Waiting for opponent to join...</em></p>
}
else
{
    <table>
        @foreach (var row in "ABCDEFGHIJ")
        {
            <tr>
                @for (int col = 1; col <= 10; col++)
                {
                    var pos = $"{row}{col}";
                    var value = GameComponents.GetBoard()[pos];
                    <td style="width: 30px; height: 30px; text-align: center; border: 1px solid black;
                    background: @(BoardStatus(value));"
                        @onclick="() => ShootAtTarget(pos)">
                        @GameComponents.GetBoard()[pos]
                    </td>
                }
            </tr>
        }
    </table>
}

@code {

    private int _allShips;
    protected override void OnInitialized()
    {
        GameComponents.GetBoard();
        GameComponents.GetOpponentBoard();
        foreach (var ship in GameComponents.GetShips())
        {
            _allShips += ship.Value;
        }
    }

    private string BoardStatus(int value)
    {
        return value switch
        {
            0 => "lightblue",
            1 => "lightgreen",
            -1 => "darkred",
            -2 => "blue",
            _ => "black"
        };
    }
    
    private void ShootAtTarget(string position)
    {
        GameComponents.ShootBoard(position);
    }
}