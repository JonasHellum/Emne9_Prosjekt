@page "/User"
@using System.Text.Json
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime


<div style="background: #ffffff;
            width: 1000px;
            margin: 0 auto">
    <h1 style="padding-top: 150px;
               padding-bottom: 50px;
               text-align: center">
        @if (memberDto != null && !memberId.IsNullOrEmpty())
        {
            <p>User:</p>
            <p>Username: @memberDto.UserName</p>
            <p>Name: @memberDto.FirstName</p>
            <p>Last name: @memberDto.LastName</p>
            <p>Email: @memberDto.Email</p>
            <p>Date of birth: @memberDto.BirthYear</p>

            <button @onclick="ShowEditForm" class="btn btn-primary">Edit</button>

            @if (showEditForm)
            {
                <EditForm Model="@memberUpdateDto" OnValidSubmit="EditMemberAsync" FormName="editForm">

                    <div class="form-group">
                        <label for="Name">Username:</label>
                        <InputText @bind-Value="memberUpdateDto.UserName" class="form-control" name="UserName"/>
                    </div>

                    <div class="form-group">
                        <label for="Name">First name:</label>
                        <InputText @bind-Value="memberUpdateDto.FirstName" class="form-control" name="FirstName"/>
                    </div>

                    <div class="form-group">
                        <label for="Name">Last name:</label>
                        <InputText @bind-Value="memberUpdateDto.LastName" class="form-control" name="LastName"/>
                    </div>

                    <div class="form-group">
                        <label for="Content">Email:</label>
                        <InputText @bind-Value="memberUpdateDto.Email" class="form-control" name="Email"/>
                    </div>

                    <div class="form-group">
                        <label for="Name">Birth year:</label>
                        <InputDate @bind-Value="memberUpdateDto.BirthYear" class="form-control" name="BirthYear"/>
                    </div>

                    <div class="form-group">
                        <label for="Address">Password:</label>
                        <InputText @bind-Value="memberUpdateDto.Password" type="password" class="form-control" name="Password"/>
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>

                @if (editSuccess)
                {
                    <div class="alert alert-success">
                        Edit successfull.
                    </div>
                }
                else if (editFailed)
                {
                    <div class="alert alert-danger">
                        Edit failed.
                        <p>@errorMessage</p>
                    </div>
                }
            }
        }
        else
        {
            <p>Loading.</p>
        }

    </h1>
</div>

@code {
    public string memberId { get; set; }
    private MemberDTO memberDto { get; set; }
    private MemberUpdateDTO memberUpdateDto { get; set; } = new MemberUpdateDTO();
    private bool showEditForm = false;
    private bool editSuccess = false;
    private bool editFailed = false;
    private string errorMessage;
    private bool _isClientSide;
    private bool loggedIn;
    
    protected override async Task OnInitializedAsync()
    {
        memberDto = new MemberDTO();
        
        try
        {
            memberId = await Http.GetStringAsync("http://localhost:80/api/members/MemberId-info");
            Console.WriteLine($"memberId from User: {memberId}");
            if (!memberId.IsNullOrEmpty())
            {
                memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
                StateHasChanged();
            }
            loggedIn = !string.IsNullOrEmpty(memberId);
        
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loggedIn == false)
            {
                // Perform JavaScript interop only after prerendering
                _isClientSide = true;

                try
                {
                    // Retrieve the token from cookies using JSInterop
                    var token = await JSRuntime.InvokeAsync<string>("getCookie", "AuthTokenCOMON");

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Add the JWT token to the Authorization header of HttpClient
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    }
                
                    memberId = await Http.GetStringAsync("http://localhost:80/api/members/MemberId-info");
                    if (!memberId.IsNullOrEmpty())
                    {
                        memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
                        StateHasChanged();
                    }
                    else
                    {
                        NavManager.NavigateTo("/login");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during initialization: {ex.Message}");
                }    
            }
        }
    }

    private void ShowEditForm()
    {
        if (memberDto != null)
        {
            memberUpdateDto.UserName = memberDto.UserName;
            memberUpdateDto.FirstName = memberDto.FirstName;
            memberUpdateDto.LastName = memberDto.LastName;
            memberUpdateDto.BirthYear = memberDto.BirthYear;
            memberUpdateDto.Email = memberDto.Email;

        }

        showEditForm = true;
    }

    private async Task LoadUserAfterChangeAsync()
    {
        memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
        if (memberDto != null)
        {
            memberDto = new MemberDTO()
            {
                UserName = memberDto.UserName,
                FirstName = memberDto.FirstName,
                LastName = memberDto.LastName,
                BirthYear = memberDto.BirthYear,
                Email = memberDto.Email
            };
        }
    }

    private async Task EditMemberAsync()
    {
        Guid memberId = memberDto.MemberId;

        var response = await Http.PutAsJsonAsync($"http://localhost:80/api/members/update/{memberId}", memberUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            editSuccess = true;
            await LoadUserAfterChangeAsync();
        }
        else
        {
            // Extract validation errors from the response... Might not need if the validating is in blazor page?
            var responseContent = await response.Content.ReadAsStringAsync();
            try
            {
                // Try to parse error messages from response body
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (errorResponse?.Errors != null)
                {
                    errorMessage = string.Join(", ", errorResponse.Errors);
                }
                else
                {
                    errorMessage = "An unknown error occurred.";
                }
            }
            catch
            {
                errorMessage = "Failed to parse error response: " + responseContent;
            }

            editFailed = true;
        }
    }
    private class ErrorResponse
    {
        public List<string> Errors { get; set; }
    }

}