@page "/User"
@using System.Security.Claims
@using System.Text.Json
@using Emne9_Prosjekt.Features.Members.Models
@using Emne9_Prosjekt.Components.Pages.FrontPage
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject ICustomAuthenticationStateProvider AuthStateProvider

<div data-aos="zoom"></div>

<div style="background: #ffffff;
            justify-content: center;
            padding-top: 150px;
            padding-bottom: 100px"
     class="page-element">
    <h1 style="text-align: center;
               font-family: Bahnschrift,serif;
               font-weight: bolder;"
        data-aos="zoom-out-up"
        data-aos-duration="500"
        data-aos-delay="300">
        Welcome @memberDto.UserName!
    </h1>
</div>

<div style="background: #808080"
     class="page-element">
    <div style="background: url('/Assets/PageAssets/LoopStripe.png') repeat fixed;
            width: 100%">
        <img style=" position: relative;
             width: 1000px;
             top: -35px"
             alt="" src="/Assets/PageAssets/PageBorderGu.png"/>
        <div style="color: white;
                    font-family: Bahnschrift,serif;
                    font-size: larger;
                    flex-direction: column;
                    padding-left: 150px;
                    padding-top: 20px;
                    padding-bottom: 100px">
            @if (memberDto != null && !memberId.IsNullOrEmpty())
            {
                <p style="text-decoration: underline; margin: 0">Username:</p>
                <p style="font-weight: bold">@memberDto.UserName</p>
                
                <p style="text-decoration: underline; margin: 0">Current email:</p>
                <p style="font-weight: bold">@memberDto.Email</p>
                
                <div style="display: flex; gap: 50px; padding-top: 20px">
                    <button @onclick="ShowEditForm" class="user-button">Edit</button>
                    <button class="user-button" @onclick="Logout">Logout</button>
                </div>
            }
        </div>
    </div>
</div>
<div style="background: #ffffff"
     class="page-element">
    <div style="width: 100%">
        <img style="position: relative;
                    width: 1000px;
                    top: -35px"
             alt="" src="/Assets/PageAssets/PageBorderGu.png"/>
        <div style="color: black;
                    width: 600px;
                    flex-direction: column;
                    padding-left: 150px;
                    padding-bottom: 150px">
            @if (showEditForm)
            {
                <h2 style="font-family: Bahnschrift,serif;">
                    Update your desired fields
                </h2>
                <EditForm Model="@memberUpdateDto" OnValidSubmit="EditMemberAsync" FormName="editForm">

                    <div class="form-group">
                        <label for="Content">Email:</label>
                        <InputText @bind-Value="memberUpdateDto.Email" class="update-field" name="Email"/>
                    </div>

                    <div class="form-group">
                        <label for="Address">Change Password:</label>
                        <InputText @bind-Value="memberUpdateDto.Password" type="password" class="update-field" name="Password"/>
                    </div>

                    <div style="padding-bottom: 20px" class="form-group">
                        <label for="Address">Confirm new Password:</label>
                        <InputText @bind-Value="checkPassword" type="password" class="update-field" name="CheckPassword"/>
                    </div>

                    <button type="submit" class="save-button">Save</button>
                </EditForm>

                <div style="width: 500px;
                            padding-top: 20px;
                            opacity: 0.7">
                    @if (editSuccess)
                    {
                        <div class="alert alert-success">
                            Update successful.
                        </div>
                    }
                    else if (editFailed)
                    {
                        <div class="alert alert-danger">
                            Update failed.
                            <p>@errorMessage</p>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .page-element {
        width: 1000px;
        margin: 0 auto;
        display: flex;
    }

    .user-button {
        color: white;
        width: 70px;
        height: 30px;
        text-align: center;
        background: dimgray;
        font-size: large;
        font-weight: bold;
        border-radius: 10px;
    }
    
    .user-button:hover {
        background: silver;
    }

    .user-button:active {
        background: grey;
    }

    .update-field {
        height: 30px;
        width: 500px;
        border: 1px solid grey;
        border-radius: 5px;
        background: silver;
    }
    
    .save-button {
        color: black;
        width: 60px;
        height: 30px;
        text-align: center;
        background: silver;
        font-size: large;
        font-weight: bold;
        border-radius: 5px;
    }
    
    .save-button:hover {
        background: gainsboro;
    }
    
    .save-button:active {
        background: dimgray;
    }
</style>

@code {
    public string memberId { get; set; }
    private MemberDTO memberDto { get; set; }
    private MemberUpdateDTO memberUpdateDto { get; set; } = new MemberUpdateDTO();
    private bool showEditForm = false;
    private bool editSuccess = false;
    private bool editFailed = false;
    private string checkPassword;
    private string errorMessage;
    private bool _isClientSide;
    private bool loggedIn;
    private string _loggedOut;

    protected override async Task OnInitializedAsync()
    {
        memberDto = new MemberDTO();
        
        var user = await AuthStateProvider.GetLoggedInUserAsync();
        if (user.Identity.IsAuthenticated)
        {
            memberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            loggedIn = true;
            Console.WriteLine($"memberId from UpdateTestin: {memberId}");
            if (loggedIn)
            {
                memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
            }
            StateHasChanged();
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loggedIn == false)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity.IsAuthenticated)
                {
                    memberId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? null;
                    loggedIn = !string.IsNullOrEmpty(memberId);
                    Console.WriteLine($"Set the memberId from OnAfterRenderAsync: {memberId}");
                }
            }
            if (loggedIn)
            {
                memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
            }
            else
            {
                await Task.Delay(2000);
                NavManager.NavigateTo("/login");
            }
            StateHasChanged();
        }
    }

    private void ShowEditForm()
    {
        if (memberDto != null)
        {
            memberUpdateDto.UserName = memberDto.UserName;
            memberUpdateDto.FirstName = memberDto.FirstName;
            memberUpdateDto.LastName = memberDto.LastName;
            memberUpdateDto.BirthYear = memberDto.BirthYear;
            memberUpdateDto.Email = memberDto.Email;
        }

        showEditForm = true;
    }
    
    private async Task LoadUserAfterChangeAsync()
    {
        memberDto = await Http.GetFromJsonAsync<MemberDTO>($"http://localhost:80/api/members/get/{memberId}");
        if (memberDto != null)
        {
            memberDto = new MemberDTO()
            {
                UserName = memberDto.UserName,
                FirstName = memberDto.FirstName,
                LastName = memberDto.LastName,
                BirthYear = memberDto.BirthYear,
                Email = memberDto.Email
            };
        }
    }
    
    private async Task EditMemberAsync()
    {
        Guid memberId = memberDto.MemberId;
        
        if (memberUpdateDto.Password != checkPassword)
        {
            errorMessage = "Passwords do not match";
            editSuccess = false;
            editFailed = true;
            return;
        }

        var response = await Http.PutAsJsonAsync($"http://localhost:80/api/members/update/{memberId}", memberUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            editSuccess = true;
            await LoadUserAfterChangeAsync();
        }
        else
        {
            // Extract validation errors from the response... Might not need if the validating is in blazor page?
            var responseContent = await response.Content.ReadAsStringAsync();
            try
            {
                // Try to parse error messages from response body
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (errorResponse?.Errors != null)
                {
                    errorMessage = string.Join(", ", errorResponse.Errors);
                }
                else
                {
                    errorMessage = "An unknown error occurred.";
                }
            }
            catch
            {
                errorMessage = "Failed: " + responseContent;
            }

            editFailed = true;
        }
    }
    
    private async Task Logout()
    {
        var refreshToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "RefreshToken");
        var memberRefreshToken = new MemberTokenRequest() { RefreshToken = refreshToken };
        var response = await Http.PostAsJsonAsync("http://localhost:80/api/members/Logout", memberRefreshToken);
        if (response.IsSuccessStatusCode)
        {
            AuthStateProvider.MarkUserAsLoggedOut();
            
            StateHasChanged();
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            _loggedOut = "Logout failed";
        }
    }
    
    private class ErrorResponse
    {
        public List<string> Errors { get; set; }
    }
}