@page "/login"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Emne9_Prosjekt.Components.Pages.Services
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Microsoft.JSInterop
@using Emne9_Prosjekt.Components.Pages.FrontPage
@inject ICustomAuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger

<div data-aos="zoom"></div>

<div style="background: #ffffff;
            justify-content: center;
            padding-top: 200px;
            padding-bottom: 150px;
            flex-direction: column;
            text-align: center;
            align-items: center;
            font-family: Bahnschrift,serif;
            font-weight: bolder;"
     class="page-element">
    <h1 data-aos="zoom-out-down"
        data-aos-duration="500"
        data-aos-delay="300">
        Login using a local account
    </h1>
    <h1 data-aos="zoom-out-up"
        data-aos-duration="500"
        data-aos-delay="600">
        or a Google account
    </h1>
</div>

<div style="background: #808080"
     class="page-element">
    <div style="background: url('/Assets/PageAssets/LoopStripe.png') repeat fixed;
                width: 100%; padding-bottom: 200px; padding-top: 50px; justify-content: center">
        <img style=" position: relative;
                 width: 1000px;
                 top: -85px"
             alt="" src="/Assets/PageAssets/PageBorderGu.png"/>
        @if (memberDto != null && userName.IsNullOrEmpty())
        {
            <h5 style="text-align: center;
                       text-decoration: underline;
                       color: white;
                       font-family: Bahnschrift,serif;">
                Local
            </h5>
        <EditForm Model="@memberDto" OnValidSubmit="LoginAsync" FormName="LoginForm">
            <div style="display: flex;
                        flex-direction: row;
                        justify-content: center;
                        align-items: flex-start">
                <div style="width: 500px;
                            display: flex;
                            flex-direction: column;">
                    <div style="display: flex;
                                flex-direction: row;
                                align-items: center;
                                padding-bottom: 10px;
                                padding-right: 10px;">
                        <h3 style="font-family: Bahnschrift, serif;
                                   padding-right: 10px;
                                   color: white;
                                   margin: 0;">
                            Username:
                        </h3>
                        <InputText @bind-Value="memberDto.UserName" class="form-control" name="Username" />
                    </div>
                    <div style="display: flex;
                                flex-direction: row;
                                align-items: center;
                                padding-right: 10px;">
                        <h3 style="font-family: Bahnschrift, serif;
                                   padding-right: 15px;
                                   color: white;
                                   margin: 0;">
                            Password:
                        </h3>
                        <InputText @bind-Value="memberDto.Password" type="password" class="form-control" name="Password" />
                    </div>
                </div>
                <div style="display: flex; align-items: center;">
                    <button type="submit" class="login-button">
                        Login
                    </button>
                </div>
            </div>
        </EditForm>
            
            <div style="width: 500px;
                        opacity: 0.7;
                        padding-top: 50px;
                        margin: 0 auto">
                @if (!string.IsNullOrEmpty(errorMessage))
                { 
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                @if (loginSuccess)
                { 
                    <div class="alert alert-success">
                        Login success! Username: @memberDto.UserName
                    </div>
                }
                @if (loginFailed)
                {
                    <div class="alert alert-danger">
                        Login failed.
                    </div>
                }
            </div>
            }
            else if (memberDto == null)
            {
                <p>loading...??</p>
            }

            @if (loggedIn)
            {
                <div style="width: 500px" class="alert alert-success" href="Home.razor">
                    Already logged in as: @userName
                </div>
            }
        
        <div style="width: 500px;
                        padding-top: 70px;
                        justify-items: center;
                        margin: 0 auto;">
            <h5 style="text-align: center;
                               text-decoration: underline;
                               color: white;
                               font-family: Bahnschrift,serif;">
                Google
            </h5>
            <div id="buttonDiv"></div>
        </div>
        
    </div>    
</div>

<div style="background: #ffffff"
     class="page-element">
    <Credit/>
</div>

<style>
    .page-element {
        width: 1000px;
        margin: 0 auto;
        display: flex;
    }
    
    .login-button {
        color: white;
        width: 86px;
        height: 86px;
        background: dimgray;
        font-weight: bold;
        border-radius: 5px;
    }
    
    .login-button:hover {
        background: silver;
    }
    
    .login-button:active {
        background: grey;
    }
</style>

@code {
    private MemberDTO memberDto { get; set; }
    private bool loginSuccess;
    private bool loginFailed;
    private string errorMessage;
    private string? _clientId;
    private static string? authHeader;
    private string userName;
    private bool loggedIn;
    private bool _isClientSide;
    
    [JSInvokable]
    public async Task HandleGoogleSignIn(string idToken)
    {
        Logger.LogDebug($"Received ID Token: {idToken}");
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost/api/members/GoogleCallback", idToken);

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Login successful!");
                var tokens = await response.Content.ReadFromJsonAsync<MemberTokenResponse>();
                
                if (tokens != null)
                {
                    await AuthStateProvider.MarkUserAsAuthenticated(tokens.AccessToken, tokens.RefreshToken);
                }

                loginSuccess = true;
                StateHasChanged();
                Task.Delay(2000);
                NavManager.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Error message: {error}");

            }
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            Logger.LogError($"An error occurred: {e}");
        }
    }
    
    protected async Task LoginAsync()
    {
        if (string.IsNullOrEmpty(memberDto.UserName) || string.IsNullOrEmpty(memberDto.Password))
        {
            errorMessage = "Username and Password are required.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("/api/members/login", memberDto);
            Logger.LogDebug($"Logging in with {memberDto.UserName} and {memberDto.Password}");

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Login successful!");
                var tokens = await response.Content.ReadFromJsonAsync<MemberTokenResponse>();
                
                if (tokens != null)
                {
                    await AuthStateProvider.MarkUserAsAuthenticated(tokens.AccessToken, tokens.RefreshToken);
                    loginSuccess = true;
                }
                
                Task.Delay(2000);
                NavManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
                Logger.LogError($"Login failed with status: {response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            Logger.LogError($"Exception during login: {e}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _clientId = Configuration["Google:ClientId"];
        
        memberDto = new MemberDTO();
        
        
        var user = await AuthStateProvider.GetLoggedInUserAsync();
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity?.Name;
            loggedIn = true;
            Logger.LogDebug("Set the username from: OnInitializedAsync");
            if (loggedIn)
            {
                NavManager.NavigateTo("/User");
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initGoogleSignIn", _clientId, DotNetObjectReference.Create(this));
            
            if (loggedIn == false)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity.IsAuthenticated)
                {
                    userName = authState.User.Identity.Name ?? null;
                    loggedIn = !string.IsNullOrEmpty(userName);
                    Logger.LogDebug("Set the username from OnAfterRenderAsync");
                    if (loggedIn)
                    {
                        NavManager.NavigateTo("/User");
                    }
                }
            }
            
        }
    }
}