@page "/login"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Emne9_Prosjekt.Components.Pages.Services
@using Emne9_Prosjekt.Features.Members.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.IdentityModel.Tokens
@using Microsoft.JSInterop
@inject IAuthStateService AuthState


<h3 style="padding-top: 125px">Login.</h3>
@if (memberDto != null && userName.IsNullOrEmpty())
{
    <div id="buttonDiv"></div>
    
    <EditForm Model="@memberDto" OnValidSubmit="LoginAsync" FormName="LoginForm">

        <div>
            <label>Username:</label>
            <InputText @bind-Value="memberDto.UserName" class="form-control" name="Username"/>
        </div>

        <div>
            <label>Password:</label>
            <InputText @bind-Value="memberDto.Password" type="password" class="form-control" name="Password"/>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            test??? @errorMessage
        </div>
    }

    @if (loginSuccess)
    {
        <div class="alert alert-success">
            Login success! Username: @memberDto.UserName
        </div>
    }
    @if (loginFailed)
    {
        <div class="alert alert-danger">
            Login failed.
        </div>
    }
}
else if (memberDto == null)
{
    <p>loading...??</p>
}

@if (loggedIn)
{
    <div class="alert alert-success" href="Home.razor">
        Already logged in as: @userName
    </div>
}



@code {
    private MemberDTO memberDto { get; set; }
    private bool loginSuccess;
    private bool loginFailed;
    private string errorMessage;
    private string? _clientId;
    private static string? authHeader;
    private string userName;
    private bool loggedIn;
    private bool _isClientSide;
    
    [JSInvokable]
    public async Task HandleGoogleSignIn(string idToken)
    {
        Console.WriteLine($"Received ID Token: {idToken}");
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost/api/members/GoogleCallback", idToken);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Login successful!");
                var userName = await Http.GetStringAsync("http://localhost/api/members/Username-info");

                // Notify AuthStateService to update the state
                AuthState.SetUserName(userName);
                
                // Manually parse the Set-Cookie header
                if (response.Headers.TryGetValues("Set-Cookie", out var cookies))
                {
                    foreach (var cookie in cookies)
                    {
                        // Extract the token value (parsing can be improved; assuming standard structure here)
                        var tokenPair = cookie.Split(';')[0]; // e.g., "AuthTokenCOMON=jwt_token_value"
                        var tokenName = tokenPair.Split('=')[0]; // AuthTokenCOMON
                        var tokenValue = tokenPair.Split('=')[1];

                        // Use JSRuntime to set the cookie in the browser
                        await JSRuntime.InvokeVoidAsync("setCookie", tokenName, tokenValue, 10); // 10 = hours before expiry
                        Console.WriteLine($"Cookie manually set: {tokenName} = {tokenValue}");
                    }
                }

                loginSuccess = true;
                StateHasChanged();
                Task.Delay(2000);
                NavManager.NavigateTo("/");

            }
            else
            {
                Console.WriteLine($"Login failed: {response.StatusCode}");
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error message: {error}");

            }
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            Console.WriteLine($"An error occurred: {e}");
        }
    }
    
    protected async Task LoginAsync()
    {
        if (string.IsNullOrEmpty(memberDto.UserName) || string.IsNullOrEmpty(memberDto.Password))
        {
            errorMessage = "Username and Password are required.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:80/api/members/login", memberDto);
            Console.WriteLine($"Logging in with {memberDto.UserName} and {memberDto.Password}");

            if (response.IsSuccessStatusCode)
            {
                // Manually parse the Set-Cookie header
                if (response.Headers.TryGetValues("Set-Cookie", out var cookies))
                {
                    foreach (var cookie in cookies)
                    {
                        // Extract the token value (parsing can be improved; assuming standard structure here)
                        var tokenPair = cookie.Split(';')[0]; // e.g., "AuthTokenCOMON=jwt_token_value"
                        var tokenName = tokenPair.Split('=')[0]; // AuthTokenCOMON
                        var tokenValue = tokenPair.Split('=')[1];

                        // Use JSRuntime to set the cookie in the browser
                        await JSRuntime.InvokeVoidAsync("setCookie", tokenName, tokenValue, 2); // 2 = hours before expiry
                        Console.WriteLine($"Cookie manually set: {tokenName} = {tokenValue}");
                    }
                }
                Console.WriteLine("Login successful!");
                var userName = await Http.GetStringAsync("http://localhost/api/members/Username-info");

                // Notify AuthStateService to update the state
                AuthState.SetUserName(userName);

                loginSuccess = true;
                StateHasChanged();
                Task.Delay(2000);
                NavManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
                Console.WriteLine($"Login failed with status: {response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong. Please try again later.";
            Console.WriteLine($"Exception during login: {e.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _clientId = Configuration["Google:ClientId"];
        
        memberDto = new MemberDTO();
        
        try
        {
            userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            Console.WriteLine($"Username from Logintest: {userName}");
            loggedIn = !string.IsNullOrEmpty(userName);

            if (loggedIn)
            {
                NavManager.NavigateTo("/User");
            }
        
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initGoogleSignIn", _clientId, DotNetObjectReference.Create(this));
            
            // Perform JavaScript interop only after prerendering
            _isClientSide = true;

            try
            {
                // Retrieve the token from cookies using JSInterop
                var token = await JSRuntime.InvokeAsync<string>("getCookie", "AuthTokenCOMON");
                
                if (!string.IsNullOrEmpty(token))
                {
                    // Add the JWT token to the Authorization header of HttpClient
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                }

                // Fetch the username from the API
                userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
                loggedIn = !string.IsNullOrEmpty(userName);

                if (loggedIn)
                {
                    StateHasChanged();
                    NavManager.NavigateTo("/User");
                }
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during initialization: {ex.Message}");
            }
        }
    }
}