@page "/Battleships"
@using System.Text
@using System.Text.Json
@using Emne9_Prosjekt.GameComponents
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using Emne9_Prosjekt.Components.Pages.SocialFeatures
@using Emne9_Prosjekt.Features.Leaderboards.Models
@inject BattleShipComponents GameComponents
@inject IGameHubConnection GameHubConnection
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IConfiguration _config
@implements IAsyncDisposable

@* Inserts video background for page *@
<video class="Background" autoplay muted loop playsinline
       style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
              object-fit: cover; z-index: -1; pointer-events: none">
    <source src="Assets/Battleships/WaterBackground.mp4" type="video/mp4">
</video>

@* Outer container for rendering ripple effect under components *@
<div id="ripple-container"
     style="background: transparent">

    @* display final game state when game is over *@
    @if (_gameState == GameState.GameOver)
    {
        <div style="text-align: center;
                    margin: 20px;
                    padding: 20px;
                    background-color: @(_isWinner ? "#d4edda" : "#f8d7da");
                    color: @(_isWinner ? "#155724" : "#721c24");
                    border-radius: 10px;
                    border: 3px solid @(_isWinner ? "#c3e6cb" : "#f5c6cb");">
            <h2>@(_isWinner ? "You Won!" : "You Lost...")</h2>
            <p>@(_isWinner ? "You have demolished your opponents fleet!" : "Your opponent has demolished your fleet.")</p>
            <button style="width: 100px"
                    @onclick="ForceReload">
                Play again
            </button>
            <button style="width: 100px"
                    @onclick="ForceReloadAndReturn">
                Home
            </button>
        </div>
    }

    <div style="justify-content: center;
            padding-bottom: 100px">
        @if (!_isConnected)
        {
            <h2 style="text-align: center;
                       padding-top: 125px;
                       color: white;
                       ">Connecting to the game...</h2>
        }
        else if (_gameState == GameState.Setup)
        {
            <div style="text-align: center;
                        padding-top: 125px">
                @if (!_opponentSetupComplete && _isSetupComplete)
                {
                    <h3 data-aos="fade-down"
                        data-aos-delay="500"
                        style="color: white">
                        Waiting for your opponent to set up their board
                    </h3>
                }
                else
                {
                    <h3 data-aos="fade-up"
                        data-aos-delay="600"
                        data-aos-duration="500"
                        style="color: white">
                        Place your Battleships!
                    </h3>
                }

                @* ↓ Game setup ↓ *@
                <div style="display: flex;
                    justify-content: center;">
                    <div style="width: 400px; display: flex; justify-content: flex-end">
                        @if (!_isSetupComplete)
                        {
                            @* Display trigger for finalizing setup *@
                            @if (GameComponents.GetPlacedShips().Count == GameComponents.GetShips().Count && !_isSetupComplete)
                            {
                                <div data-aos="fade-left"
                                     @onclick="CompleteSetup"
                                     style="padding-top: 136px;
                                            cursor: pointer;
                                            position: relative">
                                    <img alt="" src="/Assets/Battleships/ReadyA.png"
                                         style="height: 200px; position: absolute"/>
                                    <img alt="" src="/Assets/Battleships/ReadyB.png"
                                         class="ship-selection"
                                         style="height: 200px; position: relative;"/>
                                </div>
                            }

                            @* Insert models for ship placement *@
                            <div style="display: flex; flex-direction: column"
                                 data-aos="fade-left"
                                 data-aos-delay="500">
                                @foreach (var ship in GameComponents.GetShips())
                                {
                                    if (!GameComponents.GetPlacedShips().ContainsKey(ship.Key))
                                    {
                                        <model-viewer class="ship-selection"
                                                      src="@($"Assets/Battleships/{@ship.Key}.glb")"
                                                      alt="Ship model"
                                                      bounds="tight"
                                                      auto-rotate
                                                      min-camera-orbit="auto auto 4m"
                                                      max-camera-orbit="auto auto 4m"
                                                      field-of-view="60deg"
                                                      exposure="0.5"
                                                      scale="0.6 0.6 0.6"
                                                      style="height: 100px; cursor: pointer"
                                                      @onclick='() => SelectShip(ship.Key)'>
                                            <h6 style="color: white">
                                                @ship.Key
                                            </h6>
                                        </model-viewer>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            @* Render left side decorative models after setup is complete *@
                            <div style="display: flex; flex-direction: column">
                                <model-viewer src="@("Assets/Battleships/Battleship.glb")"
                                              alt="Ship model"
                                              camera-controls
                                              auto-rotate
                                              camera-orbit="30deg 30deg"
                                              interaction-prompt="none"
                                              exposure="0.1"
                                              scale="0.6 0.6 0.6"
                                              style="height: 250px; width: 250px"
                                              data-aos="fade-up-left"
                                              data-aos-delay="1000">
                                </model-viewer>
                                <model-viewer src="@("Assets/Battleships/Destroyer.glb")"
                                              alt="Ship model"
                                              camera-controls
                                              auto-rotate
                                              camera-orbit="-30deg 30deg"
                                              interaction-prompt="none"
                                              exposure="0.1"
                                              scale="0.6 0.6 0.6"
                                              style="height: 250px; width: 250px"
                                              data-aos="fade-down-left"
                                              data-aos-delay="1200">
                                </model-viewer>
                            </div>
                        }
                    </div>

                    @* Main setup board *@
                    <div data-aos="fade-up"
                         data-aos-delay="300"
                         style="position: relative;
                                padding-top: 35px;
                                z-index: 100">
                        <div class="board-rotator" style="width: 400px; display: flex; justify-content: flex-end">
                            <div class="@(_isSetupComplete ? "opponent-board" : "opponent-board-active")">
                                <table class="Board">
                                    @foreach (var row in "ABCDEFGHIJ")
                                    {
                                        <tr>
                                            @for (int col = 1; col <= 10; col++)
                                            {
                                                var pos = $"{row}{col}";
                                                <td style=" position: relative;
                                                            width: 40px;
                                                            height: 40px;
                                                            text-align: center;
                                                            border: 1px solid white;
                                                            color: white;
                                                            background: @(GameComponents.GetBoard()[pos] == 1 ? "#d3d3d3" : "#2c5aa0");"
                                                    @onclick="() => PlaceShip(pos)"
                                                    @onmouseover="() => _hoveredCell = pos"
                                                    @onmouseout="() => _hoveredCell = null">
                                                    @if (_hoveredCell == pos && !_selectedShip.IsNullOrEmpty())
                                                    {
                                                        <img style="position: absolute;
                                                                    object-fit: contain;
                                                                    transform: rotateZ(@(GameComponents.GetOrientation() ? "0deg" : "90deg"));
                                                                    width: 100%;
                                                                    height: 100%;
                                                                    top: 0;
                                                                    left: 0;
                                                                    pointer-events: none"
                                                             alt="" src="/Assets/Battleships/Arrow.png"/>
                                                    }
                                                    <span style="position: relative; z-index: 1">
                                                        @pos
                                                    </span>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>

                    @* Display components for altering ship placement *@
                    <div style="width: 400px; position: relative"
                         data-aos="fade-right"
                         data-aos-delay="500">
                        @if (!_isSetupComplete)
                        {
                            <h4 style="color: white">
                                Currently modifying:
                            </h4>

                            @if (!_selectedShip.IsNullOrEmpty())
                            {
                                <div style="color: white;
                                                font-size: x-large;
                                                padding-bottom: 30px">
                                    @_selectedShip : @GameComponents.GetShips()[_selectedShip] segments
                                </div>
                                <div style="transform: translate(55px)">
                                    <div class="@(GameComponents.GetOrientation() ? "ship-orientation-horizontal" : "ship-orientation-vertical")"
                                         style="display: flex;
                                            flex-direction: column;
                                            justify-content: center;
                                            padding-bottom: 40px;
                                            width: 300px;
                                            height: 250px;)">
                                        <model-viewer src="@($"Assets/Battleships/{_selectedShip}.glb")"
                                                      alt="Ship model"
                                                      min-camera-orbit="180deg 0deg 4m"
                                                      max-camera-orbit="180deg 0deg 4m"
                                                      exposure="0.5"
                                                      scale="0.6 0.6 0.6"
                                                      style="height: 250px; width: 250px;
                                                             padding-left: 30px">
                                        </model-viewer>
                                        <img alt="" src="/Assets/Battleships/LongArrow.png"
                                             style="width: 150px; transform: translate(70px, -40px)"/>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div style="width: 300px; height: 316px">
                                    <img alt="" src="/Assets/Battleships/Empty.png"
                                         style="width: 200px"/>
                                </div>
                            }

                            <div style="display: flex;
                                        flex-direction: row;
                                        justify-content: center;
                                        padding-top: 30px;
                                        gap: 50px">
                                <img class="rotate-arrow" alt="" src="/Assets/Battleships/Rotate.png"
                                     style="width: 80px; cursor: pointer"
                                     @onclick="OrientShip"/>
                                <div>
                                    <img alt="" src="/Assets/Battleships/TrashCan.png"
                                         style="width: 80px; position: absolute"/>
                                    <img alt="" src="/Assets/Battleships/TrashLid.png"
                                         style="width: 80px; position: absolute; cursor: pointer"
                                         class="lid"
                                         @onclick="Reset"/>
                                </div>
                            </div>

                        }
                        else
                        {
                            @* Render right side decorative models after setup is complete *@
                            <model-viewer src="@($"Assets/Battleships/Cruiser.glb")"
                                          alt="Ship model"
                                          camera-controls
                                          auto-rotate
                                          camera-orbit="140deg 30deg"
                                          interaction-prompt="none"
                                          exposure="0.1"
                                          scale="0.6 0.6 0.6"
                                          style="height: 250px; width: 250px"
                                          data-aos="fade-up-right"
                                          data-aos-delay="1400">
                            </model-viewer>
                            <model-viewer src="@($"Assets/Battleships/Submarine.glb")"
                                          alt="Ship model"
                                          camera-controls
                                          auto-rotate
                                          camera-orbit="-140deg 30deg"
                                          interaction-prompt="none"
                                          exposure="0.1"
                                          scale="0.6 0.6 0.6"
                                          style="height: 250px; width: 250px"
                                          data-aos="fade-down-right"
                                          data-aos-delay="1600">
                            </model-viewer>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {








            @* ↓ Game start ↓ *@
            <div style="text-align: center;
                        color: white;
                        padding-top: 50px"
                 data-aos="fade-down"
                 data-aos-delay="500">
                <h4 style="display: inline-block; transform: translateX(-30px)">
                    @(_isMyTurn ? "Take your shot!" : "Your opponent is planning their attack...")
                </h4>
            </div>

            <div style="display: flex;
                        gap: 50px;
                        justify-content: center;
                        align-items: center;"
                 class="board-container"
                 data-aos="fade-up">

                @* Display player board and ship models. Display opponent ship models *@
                <div style="display: flex;
                            flex-direction: column;
                            align-items: center">
                    <div class="board-rotator"
                         style="width: 400px;
                                display: flex;
                                padding-bottom: 50px;
                                justify-content: center">

                        @* Display player board *@
                        <div class="@(_isMyTurn ? "player-board" : "player-board-active")">
                            <table class="Board">
                                @foreach (var row in "ABCDEFGHIJ")
                                {
                                    <tr>
                                        @for (int col = 1; col <= 10; col++)
                                        {
                                            var pos = $"{row}{col}";
                                            <td style="width: 20px; height: 20px; border: 1px solid white;
                                                background-image: url('@BoardStatus(_playerBoard, pos)');
                                                background-size: contain;
                                                background-position: center;
                                                background-repeat: no-repeat;">
                                            </td>
                                        }
                                    </tr>
                                }
                            </table>
                            <h6 style="color: white">Your Board</h6>
                        </div>
                    </div>

                    @* Display ship model for both player and opponent *@
                    <div style="display: flex;
                                position: relative; 
                                justify-content: center;
                                align-items: center">
                        <div style="display: inline-block; position: relative">
                            @* Player ships *@
                            @foreach (var ship in GameComponents.GetPlacedShips())
                            {
                                bool isSunk = ship.Value.All(pos => _playerBoard.ContainsKey(pos) && _playerBoard[pos] < 0);

                                <model-viewer src="@($"Assets/Battleships/{@ship.Key}.glb")"
                                              alt="Ship model"
                                              min-camera-orbit="@(isSunk ? "180deg 180deg 5m" : "225deg 80deg 5m")"
                                              max-camera-orbit="@(isSunk ? "180deg 180deg 5m" : "225deg 80deg 5m")"
                                              field-of-view="30deg"
                                              exposure="0.5"
                                              scale="1 1 1 1"
                                              style="height: 60px; width: 150px;">
                                    <h6 style="color: white;
                                               text-align: center;
                                               text-decoration: @(isSunk ? "line-through" : "none")">
                                        @ship.Key
                                    </h6>
                                </model-viewer>
                            }
                        </div>
                        <div>
                            @* Opponent ships *@
                            @foreach (var ship in _opponentShipStatus)
                            {
                                <model-viewer src="@($"Assets/Battleships/{@ship.Key}.glb")"
                                              alt="Ship model"
                                              min-camera-orbit="@(ship.Value ? "180deg 180deg 5m" : "225deg 80deg 5m")"
                                              max-camera-orbit="@(ship.Value ? "180deg 180deg 5m" : "225deg 80deg 5m")"
                                              field-of-view="30deg"
                                              exposure="0.1"
                                              scale="1 1 1 1"
                                              style="height: 60px; width: 150px;">
                                    <h6 style="color: grey;
                                               text-align: center;
                                               text-decoration: @(ship.Value ? "line-through" : "none")">
                                        @ship.Key
                                    </h6>
                                </model-viewer>
                            }
                        </div>
                    </div>
                </div>

                @* Display opponent board *@
                <div style="display: flex;
                            padding-right: 50px;
                            flex-direction: column;
                            align-items: flex-end">
                    <div class="board-rotator" style="width: 400px; display: flex; justify-content: flex-end">
                        <div class="@(_isMyTurn ? "opponent-board-active" : "opponent-board")">
                            <table class="Board">
                                @foreach (var row in "ABCDEFGHIJ")
                                {
                                    <tr>
                                        @for (int col = 1; col <= 10; col++)
                                        {
                                            var pos = $"{row}{col}";
                                            <td style="width: 40px; 
                                                       height: 40px;
                                                       position: relative;
                                                       overflow: visible;
                                                       border: 1px solid white;
                                                       background-image: url('@OpponentBoardStatus(_opponentBoard, pos)');
                                                       background-size: contain;
                                                       background-position: center;
                                                       background-repeat: no-repeat;"
                                                @onclick="() => UpdateShot(pos)"
                                                @onmouseover="() => _hoveredCell = pos"
                                                @onmouseout="() => _hoveredCell = null">
                                                @if (_hoveredCell == pos && _isMyTurn)
                                                {
                                                    <img style="position: absolute;
                                                                    top: 50%;
                                                                    left: 50%;
                                                                    width: 60px;
                                                                    height: 60px;
                                                                    z-index: 100;
                                                                    transform: translate(-50%, -50%)"
                                                         alt="" src="/Assets/Battleships/Aim.png"/>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </table>
                            <h6 style="color: grey">Opponent board</h6>
                        </div>
                    </div>
                </div>

                @* Insert game chat *@
                <div style="width: 400px;
                            height: 500px;
                            overflow: hidden;
                            background: rgb(255, 255, 255, 0.5);
                            border: 1px solid white">
                    @if (_gameState == GameState.Playing)
                    {
                        <GameChatFunction/>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>
    body {
        user-select: none;
    }
    
    .board-container {
        position: relative;
        z-index: 0;
    }
    
    .player-board {
        transform: perspective(1000px) rotate3d(1, 1, 0, 45deg);
        transform-origin: center center;
        transform-style: preserve-3d;
        border-collapse: collapse;
        position: relative;
        transition: transform 0.3s ease;
        z-index: 50;
    }
    
    .player-board-active {
        transform: perspective(800px) rotateX(0deg) rotateY(0deg) rotateZ(45deg) scale(1.5);
        position: relative;
        transition: transform 0.3s ease;
        z-index: 100;
    }
    
    .opponent-board {
        transform: perspective(1000px) rotate3d(1, 1, 0, 45deg);
        transform-origin: center center;
        transform-style: preserve-3d;
        border-collapse: collapse;
        position: relative;
        transition: transform 0.3s ease;
        z-index: 50;
    }

    .opponent-board-active {
        transform: perspective(800px) rotateZ(45deg);
        position: relative;
        transition: transform 0.3s ease;
        z-index: 100;
    }
    
    .board-rotator {
        transform: rotateZ(-45deg);
        transition: transform 0.3s ease;
    }
    
    .opponent-board td {
        transform: translateZ(0);
    }

    .Board {
        border-collapse: collapse;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
    }
    
    .ship-orientation-horizontal {
        transform: rotate(0deg);
        transition: transform 0.3s ease;
    }
    
    .ship-orientation-vertical {
        transform: rotate(90deg);
        transition: transform 0.3s ease;
    }
    
    .ship-selection {
        transition: transform 0.3s ease;
    }
    
    .ship-selection:hover {
        transform: scale(1.2);
        transition: transform 0.3s ease;
    }

    .ship-selection:active {
        transform: scale(0.8);
        transition: transform 0.1s ease;
    }
    
    .rotate-arrow {
        transform: rotateZ(0deg);
        transition: transform 0.3s ease;
    }
    
    .rotate-arrow:hover {
        transform: rotateZ(-90deg);
        transition: transform 0.3s ease;
    }
    
    .rotate-arrow:active {
        transform: rotateZ(-180deg);
        transition: transform 0.2s ease;
    }
    
    .lid {
        position: absolute;
        transition: transform 0.3s ease;
    }
    
    .lid:hover {
        transform: rotateZ(10deg) translateX(-5px) translateY(-5px);
        transition: transform 0.3s ease;
    }

    .lid:active {
        transform: rotateZ(-10deg) translateX(5px) translateY(-5px);
        transition: transform 0.1s ease;
    }
    
    .Background {
        width: 100%;
        height: 100%;
        object-fit: cover;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        pointer-events: none;
    }
    
    #ripple-container {
        position: relative;
        min-height: 100vh;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/sirxemic/jquery.ripples/dist/jquery.ripples-min.js"></script>
<script>
    $(document).ready(function () {
        $('#ripple-container').ripples({
            resolution: 300,
            dropRadius: 20,
            perturbance: 0.5
        });
    });
</script>

@code {

    private enum GameState
    {
        Setup,
        Playing,
        GameOver

    }

    private GameState _gameState = GameState.Setup;
    private Dictionary<string, int> _playerBoard = new();
    private Dictionary<string, int> _opponentBoard = new();
    private Dictionary<string, bool> _opponentShipStatus = new();
    private string _lastShotPosition;
    private string? _hoveredCell;
    private string _selectedShip = "";
    private int _allShips;
    private bool _isConnected;
    private bool _isSetupComplete;
    private bool _opponentSetupComplete;
    private bool _isMyTurn;
    private bool _gameOver;
    private bool _isWinner;
    private string _gameOverMessage = "";
    private string _userName;
    private bool _loggedIn;
    private string _errorMessage;
    private bool _toWinnerOnDisconnect;
    private bool _1PointToLosses = true;
    private bool _1PointToWinner = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            Console.WriteLine($"Username from Logintest: {_userName}");
            _loggedIn = !string.IsNullOrEmpty(_userName);
        
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        GameComponents.CreateBoard();

        foreach (var ship in GameComponents.GetShips())
        {
            _allShips += ship.Value;
            _opponentShipStatus[ship.Key] = false; // Initialiserer alle skip som ikke sunket
        }

        GameHubConnection.Connection.On("WaitingForOpponent", () =>
        {
            // Bare en liten beskjed mens vi venter
            Console.WriteLine("Venter på motstander...");
        });

        GameHubConnection.Connection.On<Dictionary<string, int>, bool>("StartGame", (opponentBoard, isMyTurn) =>
        {
            Console.WriteLine("Spillet starter!");
            _playerBoard = new Dictionary<string, int>(GameComponents.GetBoard());
            _opponentBoard = opponentBoard;
            _isMyTurn = isMyTurn;
            _gameState = GameState.Playing;

            InvokeAsync(StateHasChanged);
        });
        GameHubConnection.Connection.On<string, string, bool>("UpdateShot", (position, shooterId, isHit) =>
        {
            Console.WriteLine($"Mottok skudd: {position}, skytter: {shooterId}, treff: {isHit}");

            // Sjekk om det er vårt skudd (vi er skytteren) eller motstanderens skudd
            bool isMyShot = shooterId == GameHubConnection.Connection.ConnectionId;

            if (isMyShot)
            {
                // Dette er vårt skudd på motstanderens brett
                // Oppdater vårt lokale opponentBoard med resultatet (treff eller bom)
                GameComponents.UpdateOpponentBoard(position, isHit);

                // Oppdater også _opponentBoard for UI
                _opponentBoard[position] = isHit ? -1 : -2;

                Console.WriteLine($"Oppdaterte _opponentBoard[{position}] = {_opponentBoard[position]}");

                // Sjekk om spillet er over etter vårt skudd
                CheckGameOver();
            }
            else
            {
                // Dette er motstanderens skudd på vårt brett
                GameComponents.ShootBoard(position);

                // Oppdater også _playerBoard for UI
                if (_playerBoard.ContainsKey(position))
                {
                    int value = _playerBoard[position];
                    if (value == 1)
                    {
                        _playerBoard[position] = -1; // Treffer skip som ikke var truffet
                    }
                    else if (value == 0)
                    {
                        _playerBoard[position] = -2; // Bommer på tomt felt
                    }

                    Console.WriteLine($"Oppdaterte _playerBoard[{position}] = {_playerBoard[position]}");
                }

                // Sjekk om noen av våre skip er sunket og send status til motstanderen
                foreach (var ship in GameComponents.GetPlacedShips())
                {
                    bool isSunk = ship.Value.All(pos => _playerBoard.ContainsKey(pos) && _playerBoard[pos] < 0);

                    // Send skipsstatus til motstanderen
                    if (isSunk)
                    {
                        GameHubConnection.Connection.SendAsync("UpdateShipStatus", ship.Key, true);
                    }
                }

                // Sjekk om spillet er over etter motstanderens skudd
                CheckGameOver();
                Console.WriteLine("Sjekket om spillet er over etter motstanderens skudd");
            }

            // Oppdater tur-status
            _isMyTurn = !isMyShot; // Hvis det var vårt skudd, er det nå motstanderens tur, og omvendt

            // Oppdater UI
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string, bool>("UpdateShipStatus", (shipName, isSunk) =>
        {
            Console.WriteLine($"Mottok skipsstatus: {shipName}, sunket: {isSunk}");

            // Oppdater motstanderens skipsstatus
            if (_opponentShipStatus.ContainsKey(shipName))
            {
                _opponentShipStatus[shipName] = isSunk;
                Console.WriteLine($"Oppdaterte _opponentShipStatus[{shipName}] = {isSunk}");
            }

            // Sjekk om spillet er over
            CheckGameOver();

            // Oppdater UI
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<bool>("GameOver", (youWon) =>
        {
            Console.WriteLine($"Mottok GameOver: Du {(youWon ? "vant" : "tapte")}");

            // Sett spilltilstand til GameOver bare hvis vi ikke allerede er i den tilstanden
            if (_gameState != GameState.GameOver)
            {
                Console.WriteLine("Setter spilltilstand til GameOver etter melding fra server");
                _gameState = GameState.GameOver;
                _isWinner = youWon;
                _gameOverMessage = youWon ? "Du vant! Alle motstanderens skip er sunket." : "Du tapte! Alle dine skip er sunket.";

                // Oppdater UI
                InvokeAsync(StateHasChanged);
            }
        });

        // Håndter når motstanderen kobler fra
        GameHubConnection.Connection.On("OpponentDisconnected", () =>
        {
            Console.WriteLine("Motstanderen koblet fra");

            // Sett spilltilstand til GameOver hvis vi ikke allerede er i den tilstanden
            if (_gameState != GameState.GameOver)
            {
                Console.WriteLine("Setter spilltilstand til GameOver etter at motstanderen koblet fra");
                _gameState = GameState.GameOver;
                _isWinner = true;
                _gameOverMessage = "Du vant! Motstanderen koblet fra.";

                // Oppdater UI
                InvokeAsync(StateHasChanged);
            }
        });

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_loggedIn == false)
            {
                try
                {
                    // Retrieve the token from cookies using JSInterop
                    var token = await JSRuntime.InvokeAsync<string>("getCookie", "AuthTokenCOMON");

                    if (!string.IsNullOrEmpty(token))
                    {
                        // Add the JWT token to the Authorization header of HttpClient
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    }

                    // Fetch the username from the API
                    _userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
                    _loggedIn = !string.IsNullOrEmpty(_userName);

                    // Trigger a re-render now that client-side data is available
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during initialization: {ex.Message}");
                }
                
            }
            try
            {
                await GameHubConnection.Connection.StartAsync();
                _isConnected = true;
                StateHasChanged(); // Oppdater skjermen slik at "Kobler til..." forsvinner
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to hub: {ex.Message}");
            }
        }

        if (_loggedIn)
        {
            if (_gameState == GameState.Playing && _1PointToLosses)
            {
                var leaderboardLossToAdd = new LeaderboardAddOrUpdateDTO()
                {
                    GameType = "Battleships",
                    Wins = 0,
                    Losses = 1
                };
                await UpdateOrCreateLeaderboard(leaderboardLossToAdd);
                _1PointToLosses = false;
            }
        
            if (_isWinner && _1PointToWinner)
            {
                var leaderboardWinToAdd = new LeaderboardAddOrUpdateDTO()
                {
                    GameType = "Battleships",
                    Wins = 1,
                    Losses = -1
                };
                await UpdateOrCreateLeaderboard(leaderboardWinToAdd);
                _1PointToWinner = false;
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void SelectShip(string ship)
    {
        _selectedShip = ship;
        GameComponents.SelectShip(ship);

    }

    private void PlaceShip(string position)
    {
        if (!_isSetupComplete)
        {
            _selectedShip = "";
            GameComponents.PlaceShip(position);

        }
    }

    private void OrientShip()
    {
        GameComponents.ToggleOrientation();
    }

    private async Task CompleteSetup()
    {
        _isSetupComplete = true;
        await GameHubConnection.Connection.SendAsync("JoinGame", GameComponents.GetBoard());

    }

    public async Task UpdateShot(string position)
    {
        if (!_isMyTurn || _gameState == GameState.GameOver)
            return;

        Console.WriteLine($"Sender skudd: {position}");

        // Send skudd til serveren med vår connection ID som skytter-ID
        await GameHubConnection.Connection.SendAsync("UpdateShot", position, GameHubConnection.Connection.ConnectionId);

        // Oppdater lokalt UI for å vise at vi venter på motstanderen
        _isMyTurn = false;

    }

    private int BoardValues()
    {
        int boardValue = 0;
        foreach (var square in GameComponents.GetBoard())
        {
            boardValue += square.Value;
        }

        return boardValue;
    }

    private void Reset()
    {
        GameComponents.CreateBoard();
    }

    private string BoardStatus(Dictionary<string, int> board, string pos) => board.ContainsKey(pos) switch
    {
        false => "Assets/Battleships/Empty.png",
        true when board[pos] == 1 => "Assets/Battleships/Segment.png",
        true when board[pos] == 0 => "Assets/Battleships/Empty.png",
        true when board[pos] == -1 => "Assets/Battleships/Hit.png",
        true when board[pos] == -2 => "Assets/Battleships/Miss.png"
    };
    
    private string OpponentBoardStatus(Dictionary<string, int> board, string pos) => board.ContainsKey(pos) switch
    {
        false => "Assets/Battleships/Empty.png",
        true when board[pos] == 0 => "Assets/Battleships/Empty.png",
        true when board[pos] == -1 => "Assets/Battleships/Hit.png",
        true when board[pos] == -2 => "Assets/Battleships/Miss.png",
        _ => "Assets/Battleships/Empty.png"
    };

    private async void CheckGameOver()
    {
        Console.WriteLine("Sjekker om spillet er over");

        // Hvis spillet allerede er over, ikke gjør noe
        if (_gameState == GameState.GameOver)
            return;
    

    // Sjekk om alle mine skip er sunket
        bool allMyShipsSunk = GameComponents.GetPlacedShips()
            .All(ship => ship.Value.All(pos => _playerBoard.TryGetValue(pos, out var v) && v < 0));
        // Hvis alle mine skip er sunket, har jeg tapt og motstanderen vunnet
        if (allMyShipsSunk)
        {
            Console.WriteLine("Alle mine skip er sunket. Jeg taper.");
            _gameState = GameState.GameOver;
            _isWinner = false;
            _gameOverMessage = "Du tapte! Alle dine skip er sunket.";
            await GameHubConnection.Connection.SendAsync("GameOver", true); // Motstanderen vant
            await InvokeAsync(StateHasChanged);
        }
        // Sjekk om alle motstanderens skip er sunket
        else if (_opponentShipStatus.Values.All(sunk => sunk) && _opponentShipStatus.Count > 0)
        {
            Console.WriteLine("Alle motstanderens skip er sunket. Jeg vinner.");
            _gameState = GameState.GameOver;
            _isWinner = true;
            _gameOverMessage = "Du vant! Alle motstanderens skip er sunket.";
            
            await GameHubConnection.Connection.SendAsync("GameOver", false); // Motstanderen tapte
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private class ErrorResponse
    {
        public List<string> Errors { get; set; }
    }
    
    private async Task PlaySound(int value)
    {
        string sound = value switch
        {
            -1 => "/Assets/Battleships/Audio/Hit.wav",
            -2 => "/Assets/Battleships/Audio/Miss.wav",
            _ => ""
        };

        await JSRuntime.InvokeVoidAsync("playSound", sound);
    }

    private void ForceReload()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void ForceReloadAndReturn()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }

    public async ValueTask DisposeAsync()
    {
        if (GameHubConnection != null)
        {
            await GameHubConnection.DisposeAsync();
        }
    }
    
    private async Task UpdateOrCreateLeaderboard(LeaderboardAddOrUpdateDTO leaderboardStatsToSend)
    {
        var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:80/api/leaderboards/updateOrCreate")
        {
            Content = new StringContent(JsonSerializer.Serialize(leaderboardStatsToSend), Encoding.UTF8, "application/json")
        };

        // Add the custom header
        request.Headers.Add("X-Blazor-Secret", _config["AppSettings:BlazorSecret"]);

        // Send the request using the injected HttpClient
        var response = await Http.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("IT WORKED TO SET THE POINTS");
        }
        else
        {
            // Extract validation errors from the response... Might not need if the validating is in blazor page?
            var responseContent = await response.Content.ReadAsStringAsync();
            try
            {
                // Try to parse error messages from response body
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (errorResponse?.Errors != null)
                {
                    _errorMessage = string.Join(", ", errorResponse.Errors);
                }
                else
                {
                    _errorMessage = "An unknown error occurred.";
                }
            }
            catch
            {
                _errorMessage = "Failed: " + responseContent;
            }

           Console.WriteLine(_errorMessage);
        }
    }
}