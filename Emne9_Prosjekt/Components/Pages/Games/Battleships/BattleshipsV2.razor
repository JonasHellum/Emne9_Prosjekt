@page "/BattleshipsV2"
@using Emne9_Prosjekt.GameComponents
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Emne9_Prosjekt.Components.Pages.Testing
@using Microsoft.IdentityModel.Tokens
@inject BattleShipComponents GameComponents
@inject IGameHubConnection GameHubConnection
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div style="justify-content: center;
            background: #0a53be; 
            padding-top: 125px;
            padding-bottom: 200px">
    @if (!_isConnected)
    {
        <p>Connecting to the game...</p>
    }
    else if (_gameState == GameState.Setup)
    {
        <div style="text-align: center">
            <h3>
                Place your Battleships
            </h3>
            <div style="display: flex;
                        justify-content: center">
                @if (!_isSetupComplete)
                {
                    <div style="width: 500px">
                        <div style="display: flex; flex-direction: column">
                            @foreach (var ship in GameComponents.GetShips())
                            {
                                if (!GameComponents.GetPlacedShips().ContainsKey(ship.Key))
                                {
                                    <button @onclick='() => SelectShip(ship.Key)'>@ship.Key</button>
                                }
                            }
                        </div>
                    </div>

                    <div style="width: 500px">
                        <table class="player-board" style="margin: auto">
                            @foreach (var row in "ABCDEFGHIJ")
                            {
                                <tr>
                                    @for (int col = 1; col <= 10; col++)
                                    {
                                        var pos = $"{row}{col}";
                                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                                        background: @(GameComponents.GetBoard()[pos] == 1 ? "lightgreen" : "lightblue");"
                                            @onclick="() => PlaceShip(pos)">
                                            @pos
                                        </td>
                                    }
                                </tr>
                            }
                        </table>
                    </div>

                    <div style="width: 500px">
                        <div>
                            @if (!_selectedShip.IsNullOrEmpty())
                            {
                                <h4>Selected ship: @_selectedShip</h4>
                                @if (@GameComponents.GetOrientation())
                                {
                                    <h4>Ship orientation: <button @onclick="OrientShip">Horizontal</button></h4>
                                }
                                else
                                {
                                    <h4>Ship orientation: <button @onclick="OrientShip">Vertical</button></h4>
                                }
                            }
                        </div>
                    </div>
                    <div style="padding: 50px">
                        <button @onclick="Reset">Reset the board</button>
                        @if (GameComponents.GetPlacedShips().Count == GameComponents.GetShips().Count)
                        {
                            <button @onclick="CompleteSetup">Complete setup</button>
                        }
                    </div>
                }
                else
                {
                    <table style="margin: auto">
                        @foreach (var row in "ABCDEFGHIJ")
                        {
                            <tr>
                                @for (int col = 1; col <= 10; col++)
                                {
                                    var pos = $"{row}{col}";
                                    <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                                    background: @(GameComponents.GetBoard()[pos] == 1 ? "lightgreen" : "lightblue");"
                                        @onclick="() => PlaceShip(pos)">
                                        @pos
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                    @if (!_opponentSetupComplete)
                    {
                        <h3 style="text-align: center">
                            Waiting for your opponent to set up their board
                        </h3>
                    }
                }
            </div>

        </div>
    }
    else
    {
        <div style="justify-content: center">
            <div style="text-align: center">
                <h4>@(_isMyTurn ? "Take your shot!" : "Your opponent is planning their attack...")</h4>
            </div>
            <div style="display: flex;
                        gap: 100px;
                        justify-content: center">
                <h5>Your Board</h5>
                <h5>Opponent board</h5>
            </div>
        </div>
        
        <div style="display: flex;
                    justify-content: center">
            
            <div style="width: 500px">
                <table class="player-board">
                    @foreach (var row in "ABCDEFGHIJ")
                    {
                        <tr>
                            @for (int col = 1; col <= 10; col++)
                            {
                                var pos = $"{row}{col}";
                                <td style="width: 20px; height: 20px; text-align: center; border: 1px solid black;
                                    background: @(BoardStatus(_playerBoard, pos));">
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
            
            <div style="width: 500px">
                <table class="opponent-board">
                    @foreach (var row in "ABCDEFGHIJ")
                    {
                        <tr>
                            @for (int col = 1; col <= 10; col++)
                            {
                                var pos = $"{row}{col}";
                                <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                                    background: @(BoardStatus(_opponentBoard, pos));"
                                    @onclick="() => ShootAtTarget(pos)">
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
            
            <div style="width: 500px">
                @if(_isSetupComplete && _opponentSetupComplete)
                {
                    <GameChatFunction/>
                }
            </div>
            
        </div>
    }
</div>

<style>
    .player-board {
        transform: perspective(1000px) rotateX(60deg) rotateY(45deg);
        transform-origin: bottom center;
        transform-style: preserve-3d;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        border-collapse: collapse;
        transition: transform 0.3s ease;
    }

    .opponent-board {
        transform: perspective(1000px) rotateX(60deg) rotateY(45deg);
        transform-origin: center center;
        transform-style: preserve-3d;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        border-collapse: collapse;
        transition: transform 0.3s ease;
    }

    .opponent-board td {
        transform: translateZ(0);
    }

    .opponent-board:hover {
        transform: perspective(800px) rotateX(0deg) rotateY(0deg);
    }

    .player-board:hover {
        transform: perspective(800px) rotateX(0deg) rotateY(0deg);
    }
</style>

@code {
    private enum GameState
    {
        Setup,
        Playing
    }

    private GameState _gameState = GameState.Setup;
    private Dictionary<string, int> _playerBoard = new();
    private Dictionary<string, int> _opponentBoard = new();
    private bool _isConnected;
    private int _playerNumber;
    private string _selectedShip = "";
    private int _allShips;
    private bool _isSetupComplete;
    private bool _opponentSetupComplete;
    private bool _isMyTurn;

    protected override async Task OnInitializedAsync()
    {
        GameHubConnection.Connection.On<int, Dictionary<string, int>>("GameStarted", (playerNumber, board) =>
        {
            _playerNumber = playerNumber;
            _playerBoard = board;
            _gameState = GameState.Playing;
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<Dictionary<string, int>>("UpdateBoard", (board) =>
        {
            _playerBoard = board;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<Dictionary<string, int>>("UpdateOpponentBoard", (board) =>
        {
            _opponentBoard = board;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentDisconnected", () =>
        {
            // Opponent disconnected during setup
            _opponentSetupComplete = false;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentDisconnectedDuringGame", () =>
        {
            // Opponent disconnected during game - redirect to win page
            Navigation.NavigateTo("/battleship-win");
        });

        GameHubConnection.Connection.On("OpponentConnected", () =>
        {
            _isConnected = true;
            _opponentSetupComplete = false;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("WaitingForOpponent", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentSetupComplete", () =>
        {
            _opponentSetupComplete = true;
            _gameState = GameState.Setup;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("GameReady", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("JoinedGroup", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<bool>("TurnUpdate", (isYourTurn) =>
        {
            _isMyTurn = isYourTurn;
            InvokeAsync(StateHasChanged);
        });

        await GameHubConnection.Connection.StartAsync();
        GameComponents.CreateBoard();

        foreach (var ship in GameComponents.GetShips())
        {
            _allShips += ship.Value;
        }

        await base.OnInitializedAsync();
    }

    private void SelectShip(string ship)
    {
        _selectedShip = ship;
        GameComponents.SelectShip(ship);
        StateHasChanged();
    }

    private void PlaceShip(string position)
    {
        if (!_isSetupComplete)
        {
            _selectedShip = "";
            GameComponents.PlaceShip(position);
            StateHasChanged();
        }
    }

    private void OrientShip()
    {
        GameComponents.ToggleOrientation();
    }

    private int BoardValues()
    {
        int boardValue = 0;
        foreach (var square in GameComponents.GetBoard())
        {
            boardValue += square.Value;
        }
        return boardValue;
    }

    private void Reset()
    {
        GameComponents.CreateBoard();
    }

    private async Task CompleteSetup()
    {
        if (GameHubConnection.Connection.State == HubConnectionState.Connected)
        {
            var board = GameComponents.GetBoard();
            await GameHubConnection.Connection.SendAsync("SetupComplete", board);
            _isSetupComplete = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShootAtTarget(string position)
    {
        if (_isConnected && _gameState == GameState.Playing && _isMyTurn)
        {
            await GameHubConnection.Connection.SendAsync("ShootAtOpponent", position);
        }
    }

    private string BoardStatus(Dictionary<string, int> board, string pos) => board.ContainsKey(pos) switch
    {
        false => "lightblue",
        true when board[pos] == 1 => "lightgreen",
        true when board[pos] == 0 => "lightblue",
        true when board[pos] == -1 => "darkred",
        true when board[pos] == -2 => "blue",
        _ => "Black"
    };

    public async ValueTask DisposeAsync()
    {
        if (GameHubConnection != null)
        {
            await GameHubConnection.DisposeAsync();
        }
    }
}