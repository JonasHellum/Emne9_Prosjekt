@page "/battleshippp"
@using Emne9_Prosjekt.GameComponents
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Emne9_Prosjekt.Components.Pages.Testing
@inject BattleShipComponents GameComponents
@inject IGameHubConnection GameHubConnection
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3 style="padding-top: 125px">SoHelpMeGod</h3>

@if (!_isConnected)
{
    <p>Kobler til spillet...</p>
}
else if (_gameState == GameState.Setup)
{
    <div style="text-align: center">
        <h3>Battleships setup</h3>
        <p>@(_opponentSetupComplete ? "Venter på at motstanderen skal sette opp sitt brett..." : "Plasser skipene dine")</p>

        <table style="margin: auto">
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(GameComponents.GetBoard()[pos] == 1 ? "lightgreen" : "lightblue");"
                            @onclick="() => PlaceShip(pos)">
                            @GameComponents.GetBoard()[pos]
                        </td>
                    }
                </tr>
            }
        </table>

        @if (!_isSetupComplete)
        {
            <div>
                @foreach (var ship in GameComponents.GetShips())
                {
                    <button @onclick='() => SelectShip(ship.Key)'>@ship.Key</button>
                }
            </div>

            <h4>Valgt skip: @_selectedShip</h4>
            @if (@GameComponents.GetOrientation())
            {
                <h4>Skipets retning: <button @onclick="OrientShip">Horisontal</button></h4>
            }
            else
            {
                <h4>Skipets retning: <button @onclick="OrientShip">Vertikal</button></h4>
            }

            <div>
                Alle skip: @_allShips - Nåværende skip: @BoardValues()
                @if (BoardValues() == _allShips)
                {
                    <button @onclick="CompleteSetup">Fullfør setup</button>
                }
            </div>
            <button @onclick="Reset">Nullstill brett</button>
        }
    </div>
}
else
{
    @if (_gameOver)
    {
        <div style="text-align: center; margin: 20px; padding: 20px; background-color: @(_playerWon ? "#d4edda" : "#f8d7da"); color: @(_playerWon ? "#155724" : "#721c24"); border-radius: 10px; border: 3px solid @(_playerWon ? "#c3e6cb" : "#f5c6cb");">
            <h2>@(_playerWon ? "Gratulerer! Du har vunnet spillet!" : "Du har tapt spillet!")</h2>
            <p>@(_playerWon ? "Du har sunket alle motstanderens skip." : "Motstanderen har sunket alle dine skip.")</p>
            <button class="btn btn-primary mt-3" @onclick="PlayAgain">Spill igjen</button>
        </div>
    }

    <div style="text-align: center">
        <h3>Battleship Game</h3>
        <h4>@(_isMyTurn ? "Din tur!" : "Venter på motstanderen...")</h4>
    </div>
    <div>
        <h5>Ditt Brett</h5>
        <table>
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(BoardStatus(_playerBoard, pos));">
                        </td>
                    }
                </tr>
            }
        </table>
        
        <div style="margin-top: 20px;">
            <h5>Status på Motstanderens skip:</h5>
            <ul style="list-style-type: none; padding: 0;">
                @foreach (var ship in GameComponents.GetPlacedShips())
                {
                    bool isSunk = ship.Value.All(pos => _opponentBoard.ContainsKey(pos) && _opponentBoard[pos] < 0);
                    <li style="color: @(isSunk ? "red" : "green")">
                        @ship.Key: @(isSunk ? "Sunket" : "Intakt")
                    </li>
                }
            </ul>
        </div>
    </div>

    <div>
        <h5>Motstanderens Brett</h5>
        <table>
            @foreach (var row in "ABCDEFGHIJ")
            {
                <tr>
                    @for (int col = 1; col <= 10; col++)
                    {
                        var pos = $"{row}{col}";
                        <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                        background: @(BoardStatus(_opponentBoard, pos));"
                            @onclick="() => ShootAtTarget(pos)">
                        </td>
                    }
                </tr>
            }
        </table>
        
        @if (!_gameOver)
        {
            <div style="margin-top: 20px;">
                <h5>Dine skip: @GameComponents.SunkenShipCount av @GameComponents.GetShips().Count</h5>
            </div>
        }
    </div>
}
@if(_isSetupComplete && _opponentSetupComplete)
{
    <GameChatFunction/>
}

@code {
    private enum GameState
    {
        Setup,
        Playing
    }

    private GameState _gameState = GameState.Setup;
    private Dictionary<string, int> _playerBoard = new();
    private Dictionary<string, int> _opponentBoard = new();
    private bool _isConnected;
    private int _playerNumber;
    private string _selectedShip = "";
    private int _allShips;
    private bool _isSetupComplete;
    private bool _opponentSetupComplete;
    private bool _isMyTurn;
    private bool _gameOver;
    private bool _playerWon;

    protected override async Task OnInitializedAsync()
    {
        GameHubConnection.Connection.On<int, Dictionary<string, int>>("GameStarted", (playerNumber, board) =>
        {
            _playerNumber = playerNumber;
            _playerBoard = board;
            _gameState = GameState.Playing;
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<Dictionary<string, int>>("UpdateBoard", (board) =>
        {
            _playerBoard = board;
            
            // Check if all our ships have been sunk by the opponent
            int sunkenShips = 0;
            foreach (var ship in GameComponents.GetPlacedShips())
            {
                if (ship.Value.All(pos => board.ContainsKey(pos) && board[pos] < 0))
                {
                    sunkenShips++;
                }
            }
            
            if (sunkenShips == GameComponents.GetShips().Count)
            {
                _gameOver = true;
                _playerWon = false;
            }
            
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<Dictionary<string, int>>("UpdateOpponentBoard", (board) =>
        {
            _opponentBoard = board;
    
            // Sjekk om vi har senket alle motstanderens skip
            // Teller antall posisjoner som har blitt truffet (verdi < 0 i brettet)
            int hitPositions = board.Count(pos => pos.Value < 0);
    
            // Hvis antall treff tilsvarer totalt antall skipsdeler
            if (hitPositions == _allShips)
            {
                _gameOver = true;
                _playerWon = true;
            }
    
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentDisconnected", () =>
        {
            // Opponent disconnected during setup
            _opponentSetupComplete = false;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentDisconnectedDuringGame", () =>
        {
            // Opponent disconnected during game - redirect to win page
            // Navigation.NavigateTo("/battleship-win");
            _gameOver = true;
            _playerWon = false;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentConnected", () =>
        {
            _isConnected = true;
            _opponentSetupComplete = false;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("WaitingForOpponent", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On("OpponentSetupComplete", () =>
        {
            _opponentSetupComplete = true;
            _gameState = GameState.Setup;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("GameReady", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<string>("JoinedGroup", (_) =>
        {
            _isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        GameHubConnection.Connection.On<bool>("TurnUpdate", (isYourTurn) =>
        {
            _isMyTurn = isYourTurn;
            InvokeAsync(StateHasChanged);
        });

        await GameHubConnection.Connection.StartAsync();
        GameComponents.CreateBoard();

        foreach (var ship in GameComponents.GetShips())
        {
            _allShips += ship.Value;
        }

        await base.OnInitializedAsync();
    }

    private void SelectShip(string ship)
    {
        _selectedShip = ship;
        GameComponents.SelectShip(ship);
        StateHasChanged();
    }

    private void PlaceShip(string position)
    {
        if (!_isSetupComplete)
        {
            _selectedShip = "";
            GameComponents.PlaceShip(position);
            StateHasChanged();
        }
    }

    private void OrientShip()
    {
        GameComponents.ToggleOrientation();
    }

    private int BoardValues()
    {
        int boardValue = 0;
        foreach (var square in GameComponents.GetBoard())
        {
            boardValue += square.Value;
        }
        return boardValue;
    }

    private void Reset()
    {
        GameComponents.CreateBoard();
    }

    private async Task CompleteSetup()
    {
        if (GameHubConnection.Connection.State == HubConnectionState.Connected)
        {
            var board = GameComponents.GetBoard();
            await GameHubConnection.Connection.SendAsync("SetupComplete", board);
            _isSetupComplete = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShootAtTarget(string position)
    {
        if (_isConnected && _gameState == GameState.Playing && _isMyTurn && !_gameOver)
        {
            await GameHubConnection.Connection.SendAsync("ShootAtOpponent", position);
        }
    }

    private string BoardStatus(Dictionary<string, int> board, string pos) => board.ContainsKey(pos) switch
    {
        false => "gray",
        true when board[pos] == 1 => "lightgreen",
        true when board[pos] == -1 => "darkred",
        true when board[pos] == -2 => "blue",
        _ => "lightblue"
    };
    
    private void PlayAgain()
    {
        Navigation.NavigateTo("/battleship", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (GameHubConnection != null)
        {
            await GameHubConnection.Connection.DisposeAsync();
        }
    }
}
