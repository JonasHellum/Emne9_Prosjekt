@page "/Connect4"
@using System.Text
@using System.Text.Json
@using Emne9_Prosjekt.Components.Pages.Interfaces
@using Emne9_Prosjekt.Features.Leaderboards.Models
@using Emne9_Prosjekt.GameComponents
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Emne9_Prosjekt.Components.Pages.SocialFeatures
@inject ILogger<Connect4> Logger
@inject IConnectFourGameHubConnection ConnectHubConnection
@inject Connect4Components GameComponents
@inject HttpClient Http
@inject IConfiguration Config
@inject IJSRuntime JsRuntime
@inject ICustomAuthenticationStateProvider AuthStateProvider
@implements IAsyncDisposable

@if (_gameState != GameState.Playing)
{
    <video muted playsinline
           style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
              object-fit: cover; z-index: -1; pointer-events: none">
        <source src="Assets/Connect4/ConnectIntro.mp4" type="video/mp4">
    </video>
}

@if (_gameState == GameState.Playing)
{
    <video autoplay muted playsinline
           style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
              object-fit: cover; z-index: -1; pointer-events: none">
        <source src="Assets/Connect4/ConnectIntro.mp4" type="video/mp4">
    </video>
}

@if (_gameState == GameState.GameOver)
{
    <video autoplay muted playsinline
           style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
              object-fit: cover; z-index: -1; pointer-events: none">
        <source src="Assets/Connect4/ConnectOutro.mp4" type="video/mp4">
    </video>
}

<div style="display: flex;
flex-direction: column;
justify-content: center;
color: white;
padding-top: 100px">
    
    @if (_gameState != GameState.Playing || _gameState != GameState.GameOver)
    {
    <div data-aos="zoom-out-down"
         data-aos-delay="300"
        data-aos-duration="500"
        style="text-align: center;
                transform: translateY(-30px);
                height: 30px">
        @if (_gameState == GameState.Connecting)
                             {
        <h2 style="padding-top: 150px">
                Connecting to server...
            </h2>
            }
        else if (_gameState == GameState.WaitingForOpponent)
                                 {
        <h2 style="padding-top: 150px">
                Waiting for opponent...
            </h2>
            }
    </div>
    }
    
    
    @if (_gameState == GameState.Playing || _gameState == GameState.GameOver)
    {
    <div data-aos="zoom-out-down"
         data-aos-delay="300"
        data-aos-duration="500"
        style="text-align: center;
                transform: translateY(-30px);
                height: 30px">
        @if (_gameState == GameState.Playing)
        {
            <h3>
                @(_isMyTurn ? "Your turn" : "Opponent's turn")
            </h3>
        }
        else if (_gameState == GameState.GameOver)
        {
            <h1 class="top-text">
                Game over!
            </h1>
        }
    </div>
    }
    
    
    @if (_gameState == GameState.Connecting || _gameState == GameState.WaitingForOpponent)
    {
        <div style="display: flex;
                    flex-direction: row;
                    margin: 0 auto;
                    left: 50%;
                    transform: translateY(150px)">
            <model-viewer data-aos="zoom-out-left"
                          data-aos-delay="600"
                          data-aos-duration="600"
                          src="@("Assets/Connect4/chipR.glb")"
                          alt="chip"
                          autoplay
                          camera-orbit="0deg 90deg auto"
                          exposure="0.5"
                          scale="0.7 0.7 0.7">
            </model-viewer>
            <model-viewer data-aos="zoom-out-right"
                          data-aos-delay="600"
                          data-aos-duration="600"
                          src="@("Assets/Connect4/chipY.glb")"
                          alt="chip"
                          autoplay
                          camera-orbit="45deg 90deg auto"
                          exposure="0.5"
                          scale="0.7 0.7 0.7">
            </model-viewer>
        </div>
    }
    
    @if (_gameState == GameState.Playing || _gameState == GameState.GameOver)
    {
        <div data-aos="zoom-out-down"
             data-aos-duration="1000" 
             style="display: flex;
                    justify-content: center;
                    flex-direction: row;
                    gap: 100px">
             <div>
                 <table style="margin: auto;">
                     @foreach (var row in "ABCDEF")
                     {
                     <tr>
                             @for (int col = 1; col <= 7; col++)
                             {
                             var pos = $"{row}{col}";
                                 var value = _board[pos];
                                 <td style="width: 60px;
                                            height: 60px;
                                            text-align: center;
                                            border: 1px solid black;
                                            background: @BoardStatus(value);"
                                     @onclick="() => PlacePiece(pos)">
                                     @pos
                                 </td>
                             }
                         </tr>
                     }
                 </table>
             </div>
             <div style="width: 420px;
                         height: 360px;
                         overflow: hidden;
                         background: rgb(0, 0, 0, 0.5);
                         border: 1px solid white">
                 <GameChatFunction/>
             </div>
        </div>
    }
    
    @if (_gameState == GameState.GameOver)
    {
        <h2 data-aos="fade-up"
            data-aos-duration="300"
            style="text-align: center;
                   padding-top: 20px;
                   white-space: pre-line;
                   font-weight: bolder;">
            @_gameOverMessage
        </h2>
    }
</div>

@code {
    private enum GameState
    {
        NotConnected,
        Connecting,
        WaitingForOpponent,
        Playing,
        GameOver
    }

    private Dictionary<string, int>? _board;
    private bool _isMyTurn;
    private GameState _gameState = GameState.NotConnected;
    private string _gameOverMessage = "";
    private bool _connectionStarted = false;
    private bool _isWinner;
    private string? _userName;
    private bool _loggedIn;
    private string? _errorMessage;
    private bool _1PointToLosses = true;
    private bool _1PointToWinner = true;

    protected override async Task OnInitializedAsync()
    {
        GameComponents.CreateBoard();
        _board = GameComponents.GetBoard();
        _gameState = GameState.Connecting;
        var user = await AuthStateProvider.GetLoggedInUserAsync();
        if (user.Identity.IsAuthenticated)
        {
            _userName = user.Identity?.Name;
            _loggedIn = true;
            Logger.LogDebug($"Username from OnInitializedAsync: {_userName}");
        }

        // Registrer eventhandlers før vi kobler til
        ConnectHubConnection.RegisterWaitingForOpponentHandler(async () =>
        {
            _gameState = GameState.WaitingForOpponent;
            await InvokeAsync(StateHasChanged);
        });

        ConnectHubConnection.RegisterStartGameHandler(async( board, isMyTurn) =>
        {
            _board = board;
            _isMyTurn = isMyTurn;
            _gameState = GameState.Playing;
            await InvokeAsync(StateHasChanged);
        });

        ConnectHubConnection.RegisterUpdateBoardHandler(async(pos) =>
        {
            if (_gameState == GameState.Playing)
            {
                GameComponents.DropPiece(pos); // Motstanderen er gul (player 2)
                _board = GameComponents.GetBoard();
                _isMyTurn = true;
                
                if (GameComponents.GameEnd())
                {
                    _gameState = GameState.GameOver;
                    _gameOverMessage = "You lost!";
                    _isWinner = false;
                   await ConnectHubConnection.SendGameOverAsync(false);
                }

               await InvokeAsync(StateHasChanged);
            }
        });

        ConnectHubConnection.RegisterGameOverHandler(async(youWon) =>
        {
            if (_gameState == GameState.Playing)
            {
                _gameState = GameState.GameOver;
                _gameOverMessage = "You won!\n(Opponent disconnected)";
                await InvokeAsync(StateHasChanged);
                Logger.LogDebug("GameOver-melding mottatt");
            }
        });

        ConnectHubConnection.RegisterOpponentDisconnectedHandler(async () =>
        {
            if (_gameState == GameState.Playing)
            {
                _gameState = GameState.GameOver;
                _isWinner = true;
               await InvokeAsync(StateHasChanged);
            }
            else if (_gameState == GameState.WaitingForOpponent)
            {
                _gameState = GameState.WaitingForOpponent;
                await InvokeAsync(StateHasChanged);
                Logger.LogDebug("OpponentDisconnected-melding mottatt");
            }
        });
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_connectionStarted)
        {
            await JsRuntime.InvokeVoidAsync("getClientIpAddress", DotNetObjectReference.Create(this));
            if (_loggedIn == false)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity!.IsAuthenticated)
                {
                    _userName = authState.User.Identity.Name ?? null!;
                    _loggedIn = !string.IsNullOrEmpty(_userName);
                
                    Logger.LogDebug($"Set the username from OnAfterRenderAsync: {_userName}");
                    StateHasChanged();
                }
                
            }
            
            try
            {
                await ConnectHubConnection.Connection.StartAsync();
                _connectionStarted = true;
                Logger.LogDebug("SignalR-forbindelse startet.");

                // Når forbindelsen er startet, join game
                if (_gameState == GameState.Connecting)
                {
                    await ConnectHubConnection.SendJoinGameAsync(_board);
                    Logger.LogDebug("Sendte JoinGame til server.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Feil ved oppstart av SignalR i OnAfterRenderAsync: {ex.Message}");
            }
        }
        if (_loggedIn)
        {
            if (_gameState == GameState.Playing && _1PointToLosses)
            {
                var leaderboardLossToAdd = new LeaderboardAddOrUpdateDTO()
                {
                    GameType = "Connect 4",
                    Wins = 0,
                    Losses = 1
                };
                await UpdateOrCreateLeaderboard(leaderboardLossToAdd);
                _1PointToLosses = false;
            }
        
            if (_isWinner && _1PointToWinner)
            {
                var leaderboardWinToAdd = new LeaderboardAddOrUpdateDTO()
                {
                    GameType = "Connect 4",
                    Wins = 1,
                    Losses = -1
                };
                await UpdateOrCreateLeaderboard(leaderboardWinToAdd);
                _1PointToWinner = false;
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PlacePiece(string pos)
    {
        if (!_isMyTurn || _gameState != GameState.Playing)
            return;

        GameComponents.DropPiece(pos);
        _board = GameComponents.GetBoard();

        var opponentId = await ConnectHubConnection.Connection.InvokeAsync<string>("GetOpponentId");
        if (!string.IsNullOrEmpty(opponentId))
        {
            await ConnectHubConnection.SendUpdateBoardAsync(opponentId, pos);
        }

        if (GameComponents.GameEnd())
        {
            _gameState = GameState.GameOver;
            _gameOverMessage = "You won!";
            _isWinner = true;

            // Inform opponent after the board has been updated
            await ConnectHubConnection.SendGameOverAsync(true);
        }
        else
        {
            await ConnectHubConnection.SwitchTurnAsync();
            _isMyTurn = false;
        }

        StateHasChanged();
    }

    private static string BoardStatus(int value)
    {
        return value switch
        {
            0 => "lightblue",
            1 => "red",
            2 => "yellow",
            _ => "black"
        };
    }
    private class ErrorResponse
    {
        public List<string> Errors { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        if (ConnectHubConnection?.Connection != null)
        {
            if (ConnectHubConnection.Connection.State == HubConnectionState.Connected)
            {
                try
                {
                    await ConnectHubConnection.Connection.StopAsync();
                    Logger.LogDebug("SignalR-forbindelse stoppet ved Dispose.");
                }
                catch (Exception ex)
                {
                    Logger.LogError($"Feil ved stopp av SignalR: {ex.Message}");
                }
            }

            await ConnectHubConnection.DisposeAsync();
        }
    }
    private async Task UpdateOrCreateLeaderboard(LeaderboardAddOrUpdateDTO leaderboardStatsToSend) //Ta med denne Line
    {
        var user = await AuthStateProvider.GetLoggedInUserAsync();
        if (!user.Identity.IsAuthenticated)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                return;
            }
        }
        
        var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:80/api/leaderboards/updateOrCreate")
        {
            Content = new StringContent(JsonSerializer.Serialize(leaderboardStatsToSend), Encoding.UTF8, "application/json")
        };

        // Add the custom header
        request.Headers.Add("X-Blazor-Secret", Config["AppSettings:BlazorSecret"]);

        // Send the request using the injected HttpClient
        var response = await Http.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            Logger.LogDebug("IT WORKED TO SET THE POINTS");
        }
        else
        {
            // Extract validation errors from the response... Might not need if the validating is in blazor page?
            var responseContent = await response.Content.ReadAsStringAsync();
            try
            {
                // Try to parse error messages from response body
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (errorResponse?.Errors != null)
                {
                    _errorMessage = string.Join(", ", errorResponse.Errors);
                }
                else
                {
                    _errorMessage = "An unknown error occurred.";
                }
            }
            catch
            {
                _errorMessage = "Failed: " + responseContent;
            }

            Console.WriteLine(_errorMessage);
        }
    }
    
    [JSInvokable]
    public void SetClientIp(string ipAddress)
    {
        Logger.LogDebug($"Client IP: {ipAddress}");
        AuthStateProvider.SetIpAddress(ipAddress);
    }
}