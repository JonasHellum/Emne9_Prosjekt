@page "/Connect4"
@using Emne9_Prosjekt.GameComponents
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject IConnectFourGameHubConnection ConnectHubConnection
@inject Connect4Components GameComponents
@implements IAsyncDisposable

<div style="text-align: center">
    <h3 style="padding-top: 125px">Connect 4 test</h3>

    @if (_gameState == GameState.Connecting)
    {
        <div style="margin-bottom: 15px; font-weight: bold;">
            Connecting to server...
        </div>
    }
    else if (_gameState == GameState.WaitingForOpponent)
    {
        <div style="margin-bottom: 15px; font-weight: bold;">
            Waiting for opponent...
        </div>
    }
    else if (_gameState == GameState.Playing)
    {
        <div style="margin-bottom: 15px; font-weight: bold;">
            @(_isMyTurn ? "Your turn" : "Opponent's turn")
        </div>
    }
    else if (_gameState == GameState.GameOver)
    {
        <div style="margin-bottom: 15px; font-weight: bold;">
            Game over: @_gameOverMessage
        </div>
    }

    <table style="margin: auto">
        @foreach (var row in "ABCDEF")
        {
            <tr>
                @for (int col = 1; col <= 7; col++)
                {
                    var pos = $"{row}{col}";
                    var value = _board[pos];
                    <td style="width: 40px; height: 40px; text-align: center; border: 1px solid black;
                            background: @BoardStatus(value);"
                        @onclick="() => PlacePiece(pos)">
                        @pos
                    </td>
                }
            </tr>
        }
    </table>
</div>

@code {
    private enum GameState
    {
        NotConnected,
        Connecting,
        WaitingForOpponent,
        Playing,
        GameOver
    }

    private Dictionary<string, int>? _board;
    private bool _isMyTurn;
    private GameState _gameState = GameState.NotConnected;
    private string _gameOverMessage = "";
    private bool _connectionStarted = false;

    protected override async Task OnInitializedAsync()
    {
        GameComponents.CreateBoard();
        _board = GameComponents.GetBoard();
        _gameState = GameState.Connecting;

        // Registrer eventhandlers før vi kobler til
        ConnectHubConnection.Connection.On("WaitingForOpponent", () =>
        {
            _gameState = GameState.WaitingForOpponent;
            InvokeAsync(StateHasChanged);
        });

        ConnectHubConnection.Connection.On("StartGame", (Dictionary<string, int> board, bool isMyTurn) =>
        {
            _board = board;
            _isMyTurn = isMyTurn;
            _gameState = GameState.Playing;
            InvokeAsync(StateHasChanged);
        });

        ConnectHubConnection.Connection.On<string>("UpdateBoard", (pos) =>
        {
            if (_gameState == GameState.Playing)
            {
                GameComponents.DropPiece(pos); // Motstanderen er gul (player 2)
                _board = GameComponents.GetBoard();
                _isMyTurn = true;

               

                if (GameComponents.GameEnd())
                {
                    _gameState = GameState.GameOver;
                    _gameOverMessage = "You lost!";
                    ConnectHubConnection.Connection.SendAsync("GameOver", false);
                }

                InvokeAsync(StateHasChanged);
            }
        });

        ConnectHubConnection.Connection.On<bool>("GameOver", (youWon) =>
        {
            if (_gameState == GameState.Playing)
            {
                _gameState = GameState.GameOver;
                _gameOverMessage = youWon ? "You won!" : "You lost!";
                InvokeAsync(StateHasChanged);
                Console.WriteLine("GameOver-melding mottatt");
            }
        });

        ConnectHubConnection.Connection.On("OpponentDisconnected", () =>
        {
            if (_gameState == GameState.Playing)
            {
                _gameState = GameState.GameOver;
                _gameOverMessage = "You won! (Opponent disconnected)";
                InvokeAsync(StateHasChanged);
            }
            else if (_gameState == GameState.WaitingForOpponent)
            {
                _gameState = GameState.WaitingForOpponent;
                InvokeAsync(StateHasChanged);
                Console.WriteLine("OpponentDisconnected-melding mottatt");
            }
        });
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_connectionStarted)
        {
            try
            {
                await ConnectHubConnection.Connection.StartAsync();
                _connectionStarted = true;
                Console.WriteLine("SignalR-forbindelse startet.");

                // Når forbindelsen er startet, join game
                if (_gameState == GameState.Connecting)
                {
                    await ConnectHubConnection.Connection.SendAsync("JoinGame", _board);
                    Console.WriteLine("Sendte JoinGame til server.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved oppstart av SignalR i OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private async Task PlacePiece(string pos)
    {
        if (!_isMyTurn || _gameState != GameState.Playing)
            return;

        GameComponents.DropPiece(pos);
        _board = GameComponents.GetBoard();

        if (GameComponents.GameEnd())
        {
            _gameState = GameState.GameOver;
            _gameOverMessage = "You won!";
            await ConnectHubConnection.Connection.SendAsync("GameOver", true);
        }

        var opponentId = await ConnectHubConnection.Connection.InvokeAsync<string>("GetOpponentId");
        if (!string.IsNullOrEmpty(opponentId))
        {
            await ConnectHubConnection.Connection.SendAsync("UpdateOpponentBoard", opponentId, pos);
            await ConnectHubConnection.Connection.SendAsync("SwitchTurn");
            _isMyTurn = false;
        }

        StateHasChanged();
    }

    private static string BoardStatus(int value)
    {
        return value switch
        {
            0 => "lightblue",
            1 => "red",
            2 => "yellow",
            _ => "black"
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (ConnectHubConnection?.Connection != null)
        {
            if (ConnectHubConnection.Connection.State == HubConnectionState.Connected)
            {
                try
                {
                    await ConnectHubConnection.Connection.StopAsync();
                    Console.WriteLine("SignalR-forbindelse stoppet ved Dispose.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Feil ved stopp av SignalR: {ex.Message}");
                }
            }

            await ConnectHubConnection.DisposeAsync();
        }
    }
}