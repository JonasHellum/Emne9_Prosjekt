@inject IChatHubConnection ChatHubConnection
@using System.Net
@using Emne9_Prosjekt.Hubs.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@implements IAsyncDisposable

<div style="display: flex; flex-direction: column; height: 100%">
    <div id="chat-box" style="flex: 1; overflow-y: auto; display: flex; flex-direction: column-reverse; padding: 10px">
        @foreach (var msg in _messages.AsEnumerable().Reverse())
        {
            <div class="message @(msg.Item1 == _userName ? "self" : "user")">
                <strong>@msg.Item1</strong>: @msg.Item2
            </div>
        }
    </div>
    <div style="display: flex; justify-content: space-between; align-items: center">
        <input @bind="_message"
               @bind:event="oninput"
               @onkeydown="EnterToSend"
               placeholder="Write a message..."
               style="flex: 1"/>
        <button @onclick="SendMessage"
                class="chat-button"
                style="width: 100px">
            Send
        </button>
    </div>
</div>

<style>
    .message.self strong {
        color: white;  
    }
    
    .message.user strong {
        color: gray;  
    }

    .chat-button {
        color: black;
        background: whitesmoke;
        border: grey solid 1px;
        transition: background-color 0.1s ease,
                    color 0.1s ease,
                    border-color 0.1s ease;
    }
    
    .chat-button:hover {
        color: white;
        background: dimgray;
        border: gainsboro solid 2px;
    }

    .chat-button:active {
        color: white;
        background: black;
        border: gainsboro solid 1px;
    }
    
    #chat-box {
        scrollbar-color: white transparent;
    }
</style>


@code {
    private  string _userName = "";
    private string _message = "";
    private bool _isConnected;
    private bool _loggedIn;
    private List<(string, string)> _messages = new();
    protected override async Task OnInitializedAsync()
    {
        try 
        {
            _userName = await Http.GetStringAsync("http://localhost:80/api/members/Username-info");
            Console.WriteLine($"Username from Logintest: {_userName}");
            // Hvis brukernavnet er tomt eller null, sett det til "Guest"
            if (string.IsNullOrEmpty(_userName))
            {
                _userName = "Guest";
            }

            Console.WriteLine($"Username from Logintest: {_userName}");
            _loggedIn = _userName != "Guest";
        
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        } 
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("---Establishing connection...");

            ChatHubConnection.RegisterReceiveMessageHandler(async(user, message) =>
            {
                _messages.Add((user, message));
                await InvokeAsync(StateHasChanged);
            });

            ChatHubConnection.RegisterUserConnectedHandler(async (user) =>
            {
                _messages.Add(("System", $"{user} has connected."));
                await InvokeAsync(StateHasChanged);
            });

            ChatHubConnection.RegisterUserDisconnectedHandler(async (user) =>
            {
                _messages.Add(("System", $"{user} has left the game."));
               await InvokeAsync(StateHasChanged);
            });

            try
            {
                await ChatHubConnection.Connection.StartAsync();
                Console.WriteLine("--Connection established!");
                _isConnected = true;
                // Send brukernavnet til serveren for å registrere det
                if (!string.IsNullOrEmpty(_userName))
                {
                    await ChatHubConnection.RegisterUsernameAsync(_userName);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"--Feil ved tilkobling: {ex.Message}");
            }
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            await ChatHubConnection.SendMessageAsync(_message);
            _message = string.Empty;
        }
    }

    private async Task EnterToSend(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_isConnected)
        {
            await ChatHubConnection.DisposeAsync();
            Console.WriteLine("--Connection closed.");
        }
    }
}
